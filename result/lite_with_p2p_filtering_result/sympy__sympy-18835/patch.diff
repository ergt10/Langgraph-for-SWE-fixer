
diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index 57371bf..088c174 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -2085,9 +2085,58 @@ def has_variety(seq):
     return False
 
 
+class ModificationDetector(list):
+    def __init__(self, data, callback):
+        super().__init__(data)
+        self.callback = callback
+
+    def __setitem__(self, key, value):
+        super().__setitem__(key, value)
+        self.callback()
+
+    def __delitem__(self, key):
+        super().__delitem__(key)
+        self.callback()
+
+    def append(self, value):
+        super().append(value)
+        self.callback()
+
+    def pop(self, index=-1):
+        super().pop(index)
+        self.callback()
+
+    def remove(self, value):
+        super().remove(value)
+        self.callback()
+
+    def extend(self, other):
+        super().extend(other)
+        self.callback()
+
+    def insert(self, index, value):
+        super().insert(index, value)
+        self.callback()
+
+    def clear(self):
+        super().clear()
+        self.callback()
+
+    def __iadd__(self, other):
+        super().__iadd__(other)
+        self.callback()
+        return self
+
+    def __imul__(self, other):
+        super().__imul__(other)
+        self.callback()
+        return self
+
+
 def uniq(seq, result=None):
     """
     Yield unique elements from ``seq`` as an iterator. The second
+
     parameter ``result``  is used internally; it is not necessary to pass
     anything for this.
 

diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index 57371bf..f8c632a 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -2106,26 +2106,29 @@ def uniq(seq, result=None):
     >>> list(uniq([[1], [2, 1], [1]]))
     [[1], [2, 1]]
     """
+    if result is None:
+        result = []
+
+    def raise_error():
+        raise RuntimeError('sequence changed size during iteration')
+
+    seq = ModificationDetector(seq, raise_error)
+
     try:
         seen = set()
-        result = result or []
-        for i, s in enumerate(seq):
+        for s in seq:
             if not (s in seen or seen.add(s)):
                 yield s
     except TypeError:
-        if s not in result:
-            yield s
-            result.append(s)
-        if hasattr(seq, '__getitem__'):
-            for s in uniq(seq[i + 1:], result):
-                yield s
-        else:
-            for s in uniq(seq, result):
+        for s in seq:
+            if s not in result:
                 yield s
+                result.append(s)
 
 
 def generate_bell(n):
     """Return permutations of [0, 1, ..., n - 1] such that each permutation
+
     differs from the last by the exchange of a single pair of neighbors.
     The ``n!`` permutations are returned as an iterator. In order to obtain
     the next permutation from a random starting permutation, use the


diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py
index 3e3bc62..303ab06 100644
--- a/sympy/parsing/mathematica.py
+++ b/sympy/parsing/mathematica.py
@@ -666,18 +666,22 @@ class MathematicaParser:
 
         return tokens
 
-    def _is_op(self, token: tUnion[str, list]) -> bool:
+    def _is_symbol(self, token: tUnion[str, list]) -> bool:
         if isinstance(token, list):
             return False
         if re.match(self._literal, token):
-            return False
+            return True
         if re.match("-?" + self._number, token):
             return False
-        return True
+        return False
+
+    def _is_op(self, token: tUnion[str, list]) -> bool:
+        return not self._is_symbol(token)
 
     def _is_valid_star1(self, token: tUnion[str, list]) -> bool:
         if token in (")", "}"):
             return True
+
         return not self._is_op(token)
 
     def _is_valid_star2(self, token: tUnion[str, list]) -> bool:

diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py
index 3e3bc62..eb6fe7b 100644
--- a/sympy/parsing/mathematica.py
+++ b/sympy/parsing/mathematica.py
@@ -779,15 +779,16 @@ class MathematicaParser:
         pointer: int = 0
         while pointer < size:
             if (pointer > 0 and
-                    self._is_valid_star1(tokens[pointer - 1]) and
-                    self._is_valid_star2(tokens[pointer])):
+                    self._is_symbol(tokens[pointer - 1]) and
+                    self._is_symbol(tokens[pointer])):
                 # This is a trick to add missing * operators in the expression,
                 # `"*" in op_dict` makes sure the precedence level is the same as "*",
-                # while `not self._is_op( ... )` makes sure this and the previous
-                # expression are not operators.
+                # while `self._is_symbol( ... )` makes sure this and the previous
+                # expression are symbols.
                 if tokens[pointer] == "(":
                     # ( has already been processed by now, replace:
                     tokens[pointer] = "*"
+
                     tokens[pointer + 1] = tokens[pointer + 1][0]
                 else:
                     tokens.insert(pointer, "*")

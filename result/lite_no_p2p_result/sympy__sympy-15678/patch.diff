
diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py
index 52a1560..c7f8a7f 100644
--- a/sympy/geometry/util.py
+++ b/sympy/geometry/util.py
@@ -12,10 +12,11 @@ are_similar
 """
 from __future__ import division, print_function
 
-from sympy import Function, Symbol, solve
+from sympy import Eq, Function, Symbol, solve
 from sympy.core.compatibility import (
     is_sequence, range, string_types, ordered)
 from sympy.core.containers import OrderedSet
+
 from .point import Point, Point2D
 
 

diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py
index 52a1560..c5d95f5 100644
--- a/sympy/geometry/util.py
+++ b/sympy/geometry/util.py
@@ -565,19 +565,28 @@ def idiff(eq, y, x, n=1):
     sympy.core.function.diff: explicitly differentiates wrt symbols
 
     """
+    from sympy.core.function import AppliedUndef
+
+    if isinstance(eq, Eq):
+        eq = eq.lhs
+
     if is_sequence(y):
         dep = set(y)
         y = y[0]
-    elif isinstance(y, Symbol):
+    elif isinstance(y, (Symbol, AppliedUndef)):
         dep = {y}
     else:
         raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)
 
     f = dict([(s, Function(
         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
+    if isinstance(y, AppliedUndef):
+        f[y] = y
+
     dydx = Function(y.name)(x).diff(x)
     eq = eq.subs(f)
     derivs = {}
+
     for i in range(n):
         yp = solve(eq.diff(x), dydx)[0].subs(derivs)
         if i == n - 1:

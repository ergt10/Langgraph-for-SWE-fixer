
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 4810cdd..f307eae 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -964,9 +964,73 @@ warn_explicit(
         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))
         return res, explanation
 
+    def visit_Call(self, call):
+        """
+        visit `ast.Call` nodes
+        """
+        if isinstance(call.func, ast.Name) and call.func.id in ("all", "any"):
+            return self.visit_Call_all_any(call)
+        elif sys.version_info >= (3, 5):
+            return self.visit_Call_35(call)
+        else:
+            return self.visit_Call_legacy(call)
+
+    def visit_Call_all_any(self, call):
+        """
+        visit `ast.Call` nodes for `all` and `any`
+        """
+        assert isinstance(call.func, ast.Name)
+        assert call.func.id in ("all", "any")
+        assert len(call.args) == 1
+        assert not call.keywords
+
+        it = call.args[0]
+        it_res, it_expl = self.visit(it)
+        it_name = self.assign(it_res)
+
+        is_all = call.func.id == "all"
+        is_any = call.func.id == "any"
+        assert is_all or is_any
+
+        # build a list of (element, bool(element))
+        # if `all`, the bool(element) is inverted to show which element failed
+        # if `any`, the bool(element) is kept to show which element succeeded
+        # this is so the failure message can show which element caused the assertion to fail
+        # e.g. `assert all([1, 2, 0])` will show `[(1, False), (2, False), (0, True)]`
+        # e.g. `assert any([0, 0, 1])` will show `[(0, False), (0, False), (1, True)]`
+        bool_func = ast.Name("bool", ast.Load())
+        bool_call = ast.Call(bool_func, [ast.Name("el", ast.Load())], [])
+        if is_all:
+            bool_call = ast.UnaryOp(ast.Not(), bool_call)
+        el_and_bool = ast.Tuple([ast.Name("el", ast.Load()), bool_call], ast.Load())
+        list_comp = ast.ListComp(
+            el_and_bool,
+            [
+                ast.comprehension(
+                    target=ast.Name("el", ast.Store()),
+                    iter=it_name,
+                    ifs=[],
+                    is_async=0,
+                )
+            ],
+        )
+        list_comp_res = self.assign(list_comp)
+        list_comp_expl = self.explanation_param(self.display(list_comp_res))
+
+        # build the call to `all` or `any` with the new list
+        call.args[0] = list_comp_res
+        call_res, call_expl = self.visit_Call_35(call)
+
+        # build the explanation
+        expl = "{}({})\n{{{} = {}}}\n".format(
+            call_expl, it_expl, call_expl, list_comp_expl
+        )
+        return call_res, expl
+
     def visit_Call_35(self, call):
         """
         visit `ast.Call` nodes on Python3.5 and after
+
         """
         new_func, func_expl = self.visit(call.func)
         arg_expls = []

diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 4810cdd..65294d5 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -1027,17 +1027,10 @@ warn_explicit(
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
-    # ast.Call signature changed on 3.5,
-    # conditionally change  which methods is named
-    # visit_Call depending on Python version
-    if sys.version_info >= (3, 5):
-        visit_Call = visit_Call_35
-    else:
-        visit_Call = visit_Call_legacy
-
     def visit_Attribute(self, attr):
         if not isinstance(attr.ctx, ast.Load):
             return self.generic_visit(attr)
+
         value, value_expl = self.visit(attr.value)
         res = self.assign(ast.Attribute(value, attr.attr, ast.Load()))
         res_expl = self.explanation_param(self.display(res))

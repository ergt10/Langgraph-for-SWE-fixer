
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index e95085e..6954073 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -276,9 +276,14 @@ class KeyTransform(Transform):
         super().__init__(*args, **kwargs)
         self.key_name = str(key_name)
 
+    @property
+    def json_path(self):
+        return compile_json_path([self.key_name])
+
     def preprocess_lhs(self, compiler, connection):
         key_transforms = [self.key_name]
         previous = self.lhs
+
         while isinstance(previous, KeyTransform):
             key_transforms.insert(0, previous.key_name)
             previous = previous.lhs

diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index e95085e..a320c32 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -368,15 +368,22 @@ class KeyTransformIsNull(lookups.IsNull):
     def as_oracle(self, compiler, connection):
         if not self.rhs:
             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
-        return super().as_sql(compiler, connection)
+        # Oracle doesn't support JSON null, so use JSON_EXISTS to check that
+        # the key doesn't exist.
+        sql, params = self.lhs.as_oracle(compiler, connection)
+        return 'NOT JSON_EXISTS(%s, %%s)' % sql, params + (self.lhs.json_path,)
 
     def as_sqlite(self, compiler, connection):
         if not self.rhs:
             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)
-        return super().as_sql(compiler, connection)
+        # SQLite doesn't support JSON null, so use JSON_TYPE to check that the
+        # key doesn't exist.
+        sql, params = self.lhs.as_sqlite(compiler, connection)
+        return 'JSON_TYPE(%s, %%s) IS NULL' % sql, params + (self.lhs.json_path,)
 
 
 class KeyTransformIn(lookups.In):
+
     def resolve_expression_parameter(self, compiler, connection, sql, param):
         sql, params = super().resolve_expression_parameter(
             compiler, connection, sql, param,

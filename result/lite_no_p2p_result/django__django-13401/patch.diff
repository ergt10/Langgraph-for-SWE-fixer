
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 3f768d2..8724cfa 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,10 +516,14 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            return (
+                self.creation_counter == other.creation_counter and
+                self.model == other.model
+            )
         return NotImplemented
 
     def __lt__(self, other):
+
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
             return self.creation_counter < other.creation_counter

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 3f768d2..8d4b614 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -526,10 +526,11 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        return hash((self.creation_counter, self.model))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
+
         # intended to be altered after initial creation.
         obj = copy.copy(self)
         if self.remote_field:

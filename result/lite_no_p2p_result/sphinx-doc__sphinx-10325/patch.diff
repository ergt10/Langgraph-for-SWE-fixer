
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 53e783e..96c5954 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -112,12 +112,13 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
 def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
     """Used to convert the :members: option to auto directives."""
     if arg in (None, True):
-        return 'object'
+        return ['object']
     else:
-        return arg
+        return [x.strip() for x in arg.split(',') if x.strip()]
 
 
 def member_order_option(arg: Any) -> Optional[str]:
+
     """Used to convert the :members: option to auto directives."""
     if arg in (None, True):
         return None

diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 53e783e..f9b8454 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -682,10 +682,11 @@ class Documenter:
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
                 for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
+                    if cls.__name__ in self.options.inherited_members and cls != self.object:
                         # given member is a member of specified *super class*
                         return True
                     elif name in cls.__dict__:
+
                         return False
                     elif name in self.get_attr(cls, '__annotations__', {}):
                         return False

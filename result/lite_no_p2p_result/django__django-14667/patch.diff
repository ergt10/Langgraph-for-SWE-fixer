
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8635bf4..00b6038 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2083,13 +2083,14 @@ class Query(BaseExpression):
         existing, defer = self.deferred_loading
         if defer:
             # Add to existing deferred names.
-            self.deferred_loading = existing.union(field_names), True
+            self.deferred_loading = existing.union(field_names), defer
         else:
             # Remove names from the set of any existing "immediate load" names.
-            self.deferred_loading = existing.difference(field_names), False
+            self.deferred_loading = existing.difference(field_names), defer
 
     def add_immediate_loading(self, field_names):
         """
+
         Add the given list of model field names to the set of fields to
         retrieve when the SQL is executed ("immediate loading" fields). The
         field names replace any existing immediate loading field names. If

diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8635bf4..5bb2703 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2107,13 +2107,14 @@ class Query(BaseExpression):
         if defer:
             # Remove any existing deferred names from the current set before
             # setting the new names.
-            self.deferred_loading = field_names.difference(existing), False
+            self.deferred_loading = existing.difference(field_names), defer
         else:
             # Replace any existing "immediate load" field names.
-            self.deferred_loading = frozenset(field_names), False
+            self.deferred_loading = frozenset(field_names), defer
 
     def get_loaded_field_names(self):
         """
+
         If any fields are marked to be deferred, return a dictionary mapping
         models to a set of names in those fields that will be loaded. If a
         model is not in the returned dictionary, none of its fields are

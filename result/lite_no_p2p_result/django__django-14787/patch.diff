
diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 9a57ac9..5d68302 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -11,15 +11,23 @@ class classonlymethod(classmethod):
 
 
 def _update_method_wrapper(_wrapper, decorator):
-    # _multi_decorate()'s bound_method isn't available in this scope. Cheat by
-    # using it on a dummy function.
+    # _multi_decorate()'s bound_method isn't available in this scope.
+    # Cheat by using it on a dummy function.
     @decorator
     def dummy(*args, **kwargs):
         pass
+
+    # In case decorator is a functools.partial object.
+    name = getattr(decorator, '__name__', None)
+    if name is None:
+        name = type(decorator).__name__
+    dummy.__name__ = 'dummy_%s' % name
+
     update_wrapper(_wrapper, dummy)
 
 
 def _multi_decorate(decorators, method):
+
     """
     Decorate `method` with one or more function decorators. `decorators` can be
     a single decorator or an iterable of decorators.

diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 9a57ac9..e7fe444 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -42,14 +42,15 @@ def _multi_decorate(decorators, method):
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
 
+    # Preserve any existing attributes of 'method', including the name.
+    update_wrapper(_wrapper, method)
     # Copy any attributes that a decorator adds to the function it decorates.
     for dec in decorators:
         _update_method_wrapper(_wrapper, dec)
-    # Preserve any existing attributes of 'method', including the name.
-    update_wrapper(_wrapper, method)
     return _wrapper
 
 
+
 def method_decorator(decorator, name=''):
     """
     Convert a function decorator into a method decorator

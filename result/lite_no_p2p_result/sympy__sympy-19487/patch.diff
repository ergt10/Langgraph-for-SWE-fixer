
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 27e4bbc..3401ce5 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -2449,9 +2449,15 @@ class Expr(Basic, EvalfMixin):
 
             # As a last resort, we choose the one with greater value of .sort_key()
             return bool(self.sort_key() < negative_self.sort_key())
+    
+    def _eval_rewrite_as_Abs(self, arg):
+        from sympy import Abs, sign, Piecewise, nan
+        if self.func is sign:
+            return Piecewise((nan, arg.is_zero), (arg/Abs(arg), True))
 
     def extract_branch_factor(self, allow_half=False):
         """
+
         Try to write self as ``exp_polar(2*pi*I*n)*z`` in a nice way.
         Return (z, n).
 

diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 27e4bbc..b09e5cf 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -3841,9 +3841,15 @@ class Expr(Basic, EvalfMixin):
         from sympy.matrices.expressions.matexpr import _LeftRightArgs
         return [_LeftRightArgs([S.One, S.One], higher=self._eval_derivative(x))]
 
+    def _eval_rewrite_as_Abs(self, arg):
+        from sympy import Abs, sign, Piecewise, nan
+        if self.func is sign:
+            return Piecewise((nan, arg.is_zero), (arg/Abs(arg), True))
+
 
 class AtomicExpr(Atom, Expr):
     """
+
     A parent class for object which are both atoms and Exprs.
 
     For example: Symbol, Number, Rational, Integer, ...

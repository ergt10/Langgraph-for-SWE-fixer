
diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index da91f5e..96e1b7f 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -309,13 +309,14 @@ class Collector:
                         sender=model, instance=obj, using=self.using
                     )
 
-            # fast deletes
-            for qs in self.fast_deletes:
+            # fast deletes - combine queries by table
+            for qs in self.get_fast_deletes():
                 count = qs._raw_delete(using=self.using)
                 deleted_counter[qs.model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
+
                 for (field, value), instances in instances_for_fieldvalues.items():
                     query = sql.UpdateQuery(model)
                     query.update_batch([obj.pk for obj in instances],

diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index da91f5e..9f477fc 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -346,4 +346,18 @@ class Collector:
         for model, instances in self.data.items():
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
-        return sum(deleted_counter.values()), dict(deleted_counter)
+        return sum(deleted_counter.values()), dict(deleted_counter)
+
+    def get_fast_deletes(self):
+        """
+        Group fast deletes by table and combine where clauses to reduce the
+        number of delete queries.
+        """
+        grouped = {}
+        for qs in self.fast_deletes:
+            grouped.setdefault(qs.model, []).append(qs)
+        for qs_list in grouped.values():
+            qs = qs_list[0]
+            for qs2 in qs_list[1:]:
+                qs = qs | qs2
+            yield qs


diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py
index 8cfbe5f..d87c1d0 100644
--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -865,16 +865,19 @@ class SparseCodingMixin(TransformerMixin):
                                   transform_algorithm='omp',
                                   transform_n_nonzero_coefs=None,
                                   transform_alpha=None, split_sign=False,
-                                  n_jobs=None, positive_code=False):
+                                  n_jobs=None, max_iter=1000,
+                                  positive_code=False):
         self.n_components = n_components
         self.transform_algorithm = transform_algorithm
         self.transform_n_nonzero_coefs = transform_n_nonzero_coefs
         self.transform_alpha = transform_alpha
         self.split_sign = split_sign
         self.n_jobs = n_jobs
+        self.max_iter = max_iter
         self.positive_code = positive_code
 
     def transform(self, X):
+
         """Encode the data as a sparse combination of the dictionary atoms.
 
         Coding method is determined by the object parameter

diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py
index 8cfbe5f..8920ccc 100644
--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -900,10 +900,11 @@ class SparseCodingMixin(TransformerMixin):
             X, self.components_, algorithm=self.transform_algorithm,
             n_nonzero_coefs=self.transform_n_nonzero_coefs,
             alpha=self.transform_alpha, n_jobs=self.n_jobs,
-            positive=self.positive_code)
+            max_iter=self.max_iter, positive=self.positive_code)
 
         if self.split_sign:
             # feature vector is split into a positive and negative side
+
             n_samples, n_features = code.shape
             split_code = np.empty((n_samples, 2 * n_features))
             split_code[:, :n_features] = np.maximum(code, 0)

diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py
index 8cfbe5f..1500180 100644
--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -969,9 +969,14 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):
         ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
         for more details.
 
+    max_iter : int, 1000 by default
+        Maximum number of iterations to perform if `algorithm='lasso_cd'`.
+
     positive_code : bool
         Whether to enforce positivity when finding the code.
 
+
+
         .. versionadded:: 0.20
 
     Attributes

diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py
index 8cfbe5f..c8068d5 100644
--- a/sklearn/decomposition/dict_learning.py
+++ b/sklearn/decomposition/dict_learning.py
@@ -991,15 +991,17 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):
 
     def __init__(self, dictionary, transform_algorithm='omp',
                  transform_n_nonzero_coefs=None, transform_alpha=None,
-                 split_sign=False, n_jobs=None, positive_code=False):
+                 split_sign=False, n_jobs=None, max_iter=1000,
+                 positive_code=False):
         self._set_sparse_coding_params(dictionary.shape[0],
                                        transform_algorithm,
                                        transform_n_nonzero_coefs,
                                        transform_alpha, split_sign, n_jobs,
-                                       positive_code)
+                                       max_iter, positive_code)
         self.components_ = dictionary
 
     def fit(self, X, y=None):
+
         """Do nothing and return the estimator unchanged
 
         This method is just there to implement the usual API and hence

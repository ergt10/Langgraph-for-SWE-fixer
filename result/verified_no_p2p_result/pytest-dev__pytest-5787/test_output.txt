+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   src/_pytest/_code/code.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 955e54221008aba577ecbaefa15679f6777d3bf8
Merge: 0215bcd84 29bb0eda2
Author: Bruno Oliveira <nicoddemus@gmail.com>
Date:   Wed Aug 28 08:44:16 2019 -0300

    Merge pull request #5792 from dynatrace-oss-contrib/bugfix/badcase
    
    Fix pytest with mixed up filename casing.

+ git diff 955e54221008aba577ecbaefa15679f6777d3bf8
diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py
index a0f4d15ce..46fcdfeb5 100644
--- a/src/_pytest/_code/code.py
+++ b/src/_pytest/_code/code.py
@@ -1,8 +1,10 @@
 import inspect
+import io
 import re
 import sys
 import traceback
 from inspect import CO_VARARGS
+
 from inspect import CO_VARKEYWORDS
 from traceback import format_exception_only
 from types import TracebackType
@@ -858,11 +860,12 @@ class TerminalRepr:
     def __str__(self):
         # FYI this is called from pytest-xdist's serialization of exception
         # information.
-        io = py.io.TextIO()
+        io = io.StringIO()
         tw = py.io.TerminalWriter(file=io)
         self.toterminal(tw)
         return io.getvalue().strip()
 
+
     def __repr__(self):
         return "<{} instance at {:0x}>".format(self.__class__, id(self))
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: py>=1.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (1.11.0)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (23.1)
Requirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (23.1.0)
Requirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (10.1.0)
Requirement already satisfied: atomicwrites>=1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (1.4.1)
Requirement already satisfied: pluggy<1.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (0.13.1)
Requirement already satisfied: wcwidth in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.2.dev12+g955e54221.d20250505) (0.2.6)
Building wheels for collected packages: pytest
  Building editable for pytest (pyproject.toml): started
  Building editable for pytest (pyproject.toml): finished with status 'done'
  Created wheel for pytest: filename=pytest-5.1.2.dev12+g955e54221.d20250505-0.editable-py3-none-any.whl size=4962 sha256=2edbf07d3eb86cc77b542dece9070ec038c63937653cfd429497994b45b2ef80
  Stored in directory: /tmp/pip-ephem-wheel-cache-wwcdko68/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built pytest
Installing collected packages: pytest
  Attempting uninstall: pytest
    Found existing installation: pytest 5.1.2.dev12+g955e54221
    Uninstalling pytest-5.1.2.dev12+g955e54221:
      Successfully uninstalled pytest-5.1.2.dev12+g955e54221
Successfully installed pytest-5.1.2.dev12+g955e54221.d20250505
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 955e54221008aba577ecbaefa15679f6777d3bf8 testing/code/test_code.py testing/code/test_excinfo.py testing/conftest.py testing/test_reports.py
Updated 0 paths from c34eb7a31
+ git apply -v -
Checking patch testing/code/test_code.py...
Checking patch testing/code/test_excinfo.py...
Checking patch testing/conftest.py...
Checking patch testing/test_reports.py...
Applied patch testing/code/test_code.py cleanly.
Applied patch testing/code/test_excinfo.py cleanly.
Applied patch testing/conftest.py cleanly.
Applied patch testing/test_reports.py cleanly.
+ pytest -rA testing/code/test_code.py testing/code/test_excinfo.py testing/conftest.py testing/test_reports.py
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /testbed, inifile: tox.ini
collected 127 items

testing/code/test_code.py ...............                                [ 11%]
testing/code/test_excinfo.py .............F.s.......s................... [ 45%]
...FF.F.........................................FF...                    [ 87%]
testing/test_reports.py ......FF..FF....                                 [100%]

=================================== FAILURES ===================================
______ TestTraceback_f_g_h.test_traceback_only_specific_recursion_errors _______

self = <test_excinfo.TestTraceback_f_g_h object at 0x7f89e97bb070>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f89e97bb130>

    def test_traceback_only_specific_recursion_errors(self, monkeypatch):
        def f(n):
            if n == 0:
                raise RuntimeError("hello")
            f(n - 1)
    
        excinfo = pytest.raises(RuntimeError, f, 25)
        monkeypatch.delattr(excinfo.traceback.__class__, "recursionindex")
        repr = excinfo.getrepr()
>       assert "RuntimeError: hello" in str(repr.reprcrash)

testing/code/test_excinfo.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprFileLocation'> instance at 7f89e9859310>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
_______________ TestFormattedExcinfo.test_repr_excinfo_reprcrash _______________

self = <test_excinfo.TestFormattedExcinfo object at 0x7f89e9500c10>
importasmod = <function TestFormattedExcinfo.importasmod.<locals>.importasmod at 0x7f89e92004c0>

    def test_repr_excinfo_reprcrash(self, importasmod):
        mod = importasmod(
            """
            def entry():
                raise ValueError()
        """
        )
        excinfo = pytest.raises(ValueError, mod.entry)
        repr = excinfo.getrepr()
        assert repr.reprcrash.path.endswith("mod.py")
        assert repr.reprcrash.lineno == 3
        assert repr.reprcrash.message == "ValueError"
>       assert str(repr.reprcrash).endswith("mod.py:3: ValueError")

testing/code/test_excinfo.py:842: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprFileLocation'> instance at 7f89e9500ee0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
______________ TestFormattedExcinfo.test_repr_traceback_recursion ______________

self = <test_excinfo.TestFormattedExcinfo object at 0x7f89e938b430>
importasmod = <function TestFormattedExcinfo.importasmod.<locals>.importasmod at 0x7f89e9289c10>

    def test_repr_traceback_recursion(self, importasmod):
        mod = importasmod(
            """
            def rec2(x):
                return rec1(x+1)
            def rec1(x):
                return rec2(x-1)
            def entry():
                rec1(42)
        """
        )
        excinfo = pytest.raises(RuntimeError, mod.entry)
    
        for style in ("short", "long", "no"):
            p = FormattedExcinfo(style="short")
            reprtb = p.repr_traceback(excinfo)
            assert reprtb.extraline == "!!! Recursion detected (same locals & position)"
>           assert str(reprtb)

testing/code/test_excinfo.py:861: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprTraceback'> instance at 7f89e955a4f0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
________________ TestFormattedExcinfo.test_reprexcinfo_unicode _________________

self = <test_excinfo.TestFormattedExcinfo object at 0x7f89e942af70>

    def test_reprexcinfo_unicode(self):
        from _pytest._code.code import TerminalRepr
    
        class MyRepr(TerminalRepr):
            def toterminal(self, tw):
                tw.line("я")
    
>       x = str(MyRepr())

testing/code/test_excinfo.py:890: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class 'test_excinfo.TestFormattedExcinfo.test_reprexcinfo_unicode.<locals>.MyRepr'> instance at 7f89e942a850>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
______________ test_exception_repr_extraction_error_on_recursion _______________

    @pytest.mark.usefixtures("limited_recursion_depth")
    def test_exception_repr_extraction_error_on_recursion():
        """
        Ensure we can properly detect a recursion error even
        if some locals raise error on comparison (#2459).
        """
        from _pytest.pytester import LineMatcher
    
        class numpy_like:
            def __eq__(self, other):
                if type(other) is numpy_like:
                    raise ValueError(
                        "The truth value of an array "
                        "with more than one element is ambiguous."
                    )
    
        def a(x):
            return b(numpy_like())
    
        def b(x):
            return a(numpy_like())
    
        with pytest.raises(RuntimeError) as excinfo:
            a(numpy_like())
    
>       matcher = LineMatcher(str(excinfo.getrepr()).splitlines())

testing/code/test_excinfo.py:1367: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ExceptionChainRepr'> instance at 7f89e8f451c0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
__________________ test_no_recursion_index_on_recursion_error __________________

    @pytest.mark.usefixtures("limited_recursion_depth")
    def test_no_recursion_index_on_recursion_error():
        """
        Ensure that we don't break in case we can't find the recursion index
        during a recursion error (#2486).
        """
    
        class RecursionDepthError:
            def __getattr__(self, attr):
                return getattr(self, "_" + attr)
    
        with pytest.raises(RuntimeError) as excinfo:
            RecursionDepthError().trigger
>       assert "maximum recursion" in str(excinfo.getrepr())

testing/code/test_excinfo.py:1390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ExceptionChainRepr'> instance at 7f89e8e11ee0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

src/_pytest/_code/code.py:863: UnboundLocalError
_______________ TestReportSerialization.test_collectreport_fail ________________

config = <_pytest.config.Config object at 0x7f89e96090d0>
doit = <function _main at 0x7f89ea422ee0>

    def wrap_session(config, doit):
        """Skeleton command line program"""
        session = Session(config)
        session.exitstatus = ExitCode.OK
        initstate = 0
        try:
            try:
                config._do_configure()
                initstate = 1
                config.hook.pytest_sessionstart(session=session)
                initstate = 2
>               session.exitstatus = doit(config, session) or 0

/testbed/src/_pytest/main.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

config = <_pytest.config.Config object at 0x7f89e96090d0>
session = <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>

    def _main(config, session):
        """ default command line protocol for initialization, session,
        running tests and reporting. """
>       config.hook.pytest_collection(session=session)

/testbed/src/_pytest/main.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_HookCaller 'pytest_collection'>, args = ()
kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
notincall = set()

    def __call__(self, *args, **kwargs):
        if args:
            raise TypeError("hook calling supports only keyword arguments")
        assert not self.is_historic()
        if self.spec and self.spec.argnames:
            notincall = (
                set(self.spec.argnames) - set(["__multicall__"]) - set(kwargs.keys())
            )
            if notincall:
                warnings.warn(
                    "Argument(s) {} which are declared in the hookspec "
                    "can not be found in this hook call".format(tuple(notincall)),
                    stacklevel=2,
                )
>       return self._hookexec(self, self.get_hookimpls(), kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.config.PytestPluginManager object at 0x7f89e95e54f0>
hook = <_HookCaller 'pytest_collection'>
methods = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e9547760>>]
kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

    def _hookexec(self, hook, methods, kwargs):
        # called from all hookcaller instances.
        # enable_tracing will set its own wrapping function at self._inner_hookexec
>       return self._inner_hookexec(hook, methods, kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_collection'>
hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e9547760>>]
kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

    def traced_hookexec(hook, hook_impls, kwargs):
        before(hook.name, hook_impls, kwargs)
        outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
        after(outcome, hook.name, hook_impls, kwargs)
>       return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e9600040>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pluggy.callers._Result'>
func = <function PluginManager.add_hookcall_monitoring.<locals>.traced_hookexec.<locals>.<lambda> at 0x7f89e8e29670>

    @classmethod
    def from_call(cls, func):
        __tracebackhide__ = True
        result = excinfo = None
        try:
>           result = func()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_collection'>
methods = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e9547760>>]
kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
        methods,
        kwargs,
        firstresult=hook.spec.opts.get("firstresult") if hook.spec else False,
    )

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e9547760>>]
caller_kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
                        res = hook_impl.function(*args)
                        if res is not None:
                            results.append(res)
                            if firstresult:  # halt further impl calls
                                break
            except BaseException:
                excinfo = sys.exc_info()
        finally:
            if firstresult:  # first result hooks return a single value
                outcome = _Result(results[0] if results else None, excinfo)
            else:
                outcome = _Result(results, excinfo)
    
            # run all wrapper post-yield blocks
            for gen in reversed(teardowns):
                try:
                    gen.send(outcome)
                    _raise_wrapfail(gen, "has second yield")
                except StopIteration:
                    pass
    
>           return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e94c4940>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e9547760>>]
caller_kwargs = {'session': <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
>                       res = hook_impl.function(*args)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

session = <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>

    def pytest_collection(session):
>       return session.perform_collect()

/testbed/src/_pytest/main.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
args = None, genitems = True

    def perform_collect(self, args=None, genitems=True):
        hook = self.config.hook
        try:
>           items = self._perform_collect(args, genitems)

/testbed/src/_pytest/main.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
args = ['/tmp/pytest-of-root/pytest-0/test_collectreport_fail0/test_collectreport_fail.py']
genitems = True

    def _perform_collect(self, args, genitems):
        if args is None:
            args = self.config.args
        self.trace("perform_collect", self, args)
        self.trace.root.indent += 1
        self._notfound = []
        initialpaths = []
        self._initialparts = []
        self.items = items = []
        for arg in args:
            parts = self._parsearg(arg)
            self._initialparts.append(parts)
            initialpaths.append(parts[0])
        self._initialpaths = frozenset(initialpaths)
        rep = collect_one_node(self)
        self.ihook.pytest_collectreport(report=rep)
        self.trace.root.indent -= 1
        if self._notfound:
            errors = []
            for arg, exc in self._notfound:
                line = "(no name {!r} in any of {!r})".format(arg, exc.args[0])
                errors.append("not found: {}\n{}".format(arg, line))
                # XXX: test this
            raise UsageError(*errors)
        if not genitems:
            return rep.result
        else:
            if rep.passed:
                for node in rep.result:
>                   self.items.extend(self.genitems(node))

/testbed/src/_pytest/main.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_collectreport_fail0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
node = <Module test_collectreport_fail.py>

    def genitems(self, node):
        self.trace("genitems", node)
        if isinstance(node, nodes.Item):
            node.ihook.pytest_itemcollected(item=node)
            yield node
        else:
            assert isinstance(node, nodes.Collector)
>           rep = collect_one_node(node)

/testbed/src/_pytest/main.py:701: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collector = <Module test_collectreport_fail.py>

    def collect_one_node(collector):
        ihook = collector.ihook
        ihook.pytest_collectstart(collector=collector)
>       rep = ihook.pytest_make_collect_report(collector=collector)

/testbed/src/_pytest/runner.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_HookCaller 'pytest_make_collect_report'>, args = ()
kwargs = {'collector': <Module test_collectreport_fail.py>}, notincall = set()

    def __call__(self, *args, **kwargs):
        if args:
            raise TypeError("hook calling supports only keyword arguments")
        assert not self.is_historic()
        if self.spec and self.spec.argnames:
            notincall = (
                set(self.spec.argnames) - set(["__multicall__"]) - set(kwargs.keys())
            )
            if notincall:
                warnings.warn(
                    "Argument(s) {} which are declared in the hookspec "
                    "can not be found in this hook call".format(tuple(notincall)),
                    stacklevel=2,
                )
>       return self._hookexec(self, self.get_hookimpls(), kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.config.PytestPluginManager object at 0x7f89e95e54f0>
hook = <_HookCaller 'pytest_make_collect_report'>
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_collectreport_fail.py>}

    def _hookexec(self, hook, methods, kwargs):
        # called from all hookcaller instances.
        # enable_tracing will set its own wrapping function at self._inner_hookexec
>       return self._inner_hookexec(hook, methods, kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_make_collect_report'>
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_collectreport_fail.py>}

    def traced_hookexec(hook, hook_impls, kwargs):
        before(hook.name, hook_impls, kwargs)
        outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
        after(outcome, hook.name, hook_impls, kwargs)
>       return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e95ee6d0>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pluggy.callers._Result'>
func = <function PluginManager.add_hookcall_monitoring.<locals>.traced_hookexec.<locals>.<lambda> at 0x7f89e8e290d0>

    @classmethod
    def from_call(cls, func):
        __tracebackhide__ = True
        result = excinfo = None
        try:
>           result = func()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_make_collect_report'>
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_collectreport_fail.py>}

>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
        methods,
        kwargs,
        firstresult=hook.spec.opts.get("firstresult") if hook.spec else False,
    )

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
caller_kwargs = {'collector': <Module test_collectreport_fail.py>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
                        res = hook_impl.function(*args)
                        if res is not None:
                            results.append(res)
                            if firstresult:  # halt further impl calls
                                break
            except BaseException:
                excinfo = sys.exc_info()
        finally:
            if firstresult:  # first result hooks return a single value
                outcome = _Result(results[0] if results else None, excinfo)
            else:
                outcome = _Result(results, excinfo)
    
            # run all wrapper post-yield blocks
            for gen in reversed(teardowns):
                try:
>                   gen.send(outcome)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <CaptureManager _method='fd' _global_capturing=None _current_item=None>
collector = <Module test_collectreport_fail.py>

    @pytest.hookimpl(hookwrapper=True)
    def pytest_make_collect_report(self, collector):
        if isinstance(collector, pytest.File):
            self.resume_global_capture()
            outcome = yield
            self.suspend_global_capture()
            out, err = self.read_global_capture()
>           rep = outcome.get_result()

/testbed/src/_pytest/capture.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e95ee9a0>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
caller_kwargs = {'collector': <Module test_collectreport_fail.py>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
>                       res = hook_impl.function(*args)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collector = <Module test_collectreport_fail.py>

    def pytest_make_collect_report(collector):
        call = CallInfo.from_call(lambda: list(collector.collect()), "collect")
        longrepr = None
        if not call.excinfo:
            outcome = "passed"
        else:
            skip_exceptions = [Skipped]
            unittest = sys.modules.get("unittest")
            if unittest is not None:
                skip_exceptions.append(unittest.SkipTest)
            if call.excinfo.errisinstance(tuple(skip_exceptions)):
                outcome = "skipped"
                r = collector._repr_failure_py(call.excinfo, "line").reprcrash
                longrepr = (str(r.path), r.lineno, r.message)
            else:
                outcome = "failed"
>               errorinfo = collector.repr_failure(call.excinfo)

/testbed/src/_pytest/runner.py:262: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Module test_collectreport_fail.py>
excinfo = <ExceptionInfo CollectError tblen=7>

    def repr_failure(self, excinfo):
        """ represent a collection failure. """
        if excinfo.errisinstance(self.CollectError):
            exc = excinfo.value
>           return str(exc.args[0])

/testbed/src/_pytest/nodes.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ExceptionChainRepr'> instance at 7f89e8c2e3d0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError

During handling of the above exception, another exception occurred:

self = <test_reports.TestReportSerialization object at 0x7f89e9436e80>
testdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_collectreport_fail0')>

    def test_collectreport_fail(self, testdir):
        """This test came originally from test_remote.py in xdist (ca03269)."""
>       reprec = testdir.inline_runsource("qwe abc")

/testbed/testing/test_reports.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/testbed/src/_pytest/pytester.py:764: in inline_runsource
    return self.inline_run(*values)
/testbed/src/_pytest/pytester.py:830: in inline_run
    ret = pytest.main(list(args), plugins=plugins)
/testbed/src/_pytest/config/__init__.py:78: in main
    return config.hook.pytest_cmdline_main(config=config)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>
    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
/testbed/src/_pytest/main.py:228: in pytest_cmdline_main
    return wrap_session(config, _main)
/testbed/src/_pytest/main.py:211: in wrap_session
    config.notify_exception(excinfo, config.option)
/testbed/src/_pytest/config/__init__.py:750: in notify_exception
    res = self.hook.pytest_internalerror(excrepr=excrepr, excinfo=excinfo)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: in traced_hookexec
    return outcome.get_result()
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: in <lambda>
    outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>
    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
/testbed/src/_pytest/terminal.py:347: in pytest_internalerror
    for line in str(excrepr).split("\n"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprExceptionInfo'> instance at 7f89e8ebb040>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_collectreport_fail0
collected 0 items

============================ no tests ran in 0.08s =============================
_________ TestReportSerialization.test_extended_report_deserialization _________

config = <_pytest.config.Config object at 0x7f89e8bd8640>
doit = <function _main at 0x7f89ea422ee0>

    def wrap_session(config, doit):
        """Skeleton command line program"""
        session = Session(config)
        session.exitstatus = ExitCode.OK
        initstate = 0
        try:
            try:
                config._do_configure()
                initstate = 1
                config.hook.pytest_sessionstart(session=session)
                initstate = 2
>               session.exitstatus = doit(config, session) or 0

/testbed/src/_pytest/main.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

config = <_pytest.config.Config object at 0x7f89e8bd8640>
session = <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>

    def _main(config, session):
        """ default command line protocol for initialization, session,
        running tests and reporting. """
>       config.hook.pytest_collection(session=session)

/testbed/src/_pytest/main.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_HookCaller 'pytest_collection'>, args = ()
kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
notincall = set()

    def __call__(self, *args, **kwargs):
        if args:
            raise TypeError("hook calling supports only keyword arguments")
        assert not self.is_historic()
        if self.spec and self.spec.argnames:
            notincall = (
                set(self.spec.argnames) - set(["__multicall__"]) - set(kwargs.keys())
            )
            if notincall:
                warnings.warn(
                    "Argument(s) {} which are declared in the hookspec "
                    "can not be found in this hook call".format(tuple(notincall)),
                    stacklevel=2,
                )
>       return self._hookexec(self, self.get_hookimpls(), kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.config.PytestPluginManager object at 0x7f89e8b0d7f0>
hook = <_HookCaller 'pytest_collection'>
methods = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e8daa610>>]
kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

    def _hookexec(self, hook, methods, kwargs):
        # called from all hookcaller instances.
        # enable_tracing will set its own wrapping function at self._inner_hookexec
>       return self._inner_hookexec(hook, methods, kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_collection'>
hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e8daa610>>]
kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

    def traced_hookexec(hook, hook_impls, kwargs):
        before(hook.name, hook_impls, kwargs)
        outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
        after(outcome, hook.name, hook_impls, kwargs)
>       return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e907a190>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pluggy.callers._Result'>
func = <function PluginManager.add_hookcall_monitoring.<locals>.traced_hookexec.<locals>.<lambda> at 0x7f89e92e1e50>

    @classmethod
    def from_call(cls, func):
        __tracebackhide__ = True
        result = excinfo = None
        try:
>           result = func()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_collection'>
methods = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e8daa610>>]
kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}

>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
        methods,
        kwargs,
        firstresult=hook.spec.opts.get("firstresult") if hook.spec else False,
    )

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e8daa610>>]
caller_kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
                        res = hook_impl.function(*args)
                        if res is not None:
                            results.append(res)
                            if firstresult:  # halt further impl calls
                                break
            except BaseException:
                excinfo = sys.exc_info()
        finally:
            if firstresult:  # first result hooks return a single value
                outcome = _Result(results[0] if results else None, excinfo)
            else:
                outcome = _Result(results, excinfo)
    
            # run all wrapper post-yield blocks
            for gen in reversed(teardowns):
                try:
                    gen.send(outcome)
                    _raise_wrapfail(gen, "has second yield")
                except StopIteration:
                    pass
    
>           return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e907ac70>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='main', plugin=<module '_pytest.main' from '/testbed/src/_pytest/main.py'>>, <HookImpl plugin_n...rnings.py'>>, <HookImpl plugin_name='logging-plugin', plugin=<_pytest.logging.LoggingPlugin object at 0x7f89e8daa610>>]
caller_kwargs = {'session': <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
>                       res = hook_impl.function(*args)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

session = <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>

    def pytest_collection(session):
>       return session.perform_collect()

/testbed/src/_pytest/main.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
args = None, genitems = True

    def perform_collect(self, args=None, genitems=True):
        hook = self.config.hook
        try:
>           items = self._perform_collect(args, genitems)

/testbed/src/_pytest/main.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
args = ['/tmp/pytest-of-root/pytest-0/test_extended_report_deserialization0/test_extended_report_deserialization.py']
genitems = True

    def _perform_collect(self, args, genitems):
        if args is None:
            args = self.config.args
        self.trace("perform_collect", self, args)
        self.trace.root.indent += 1
        self._notfound = []
        initialpaths = []
        self._initialparts = []
        self.items = items = []
        for arg in args:
            parts = self._parsearg(arg)
            self._initialparts.append(parts)
            initialpaths.append(parts[0])
        self._initialpaths = frozenset(initialpaths)
        rep = collect_one_node(self)
        self.ihook.pytest_collectreport(report=rep)
        self.trace.root.indent -= 1
        if self._notfound:
            errors = []
            for arg, exc in self._notfound:
                line = "(no name {!r} in any of {!r})".format(arg, exc.args[0])
                errors.append("not found: {}\n{}".format(arg, line))
                # XXX: test this
            raise UsageError(*errors)
        if not genitems:
            return rep.result
        else:
            if rep.passed:
                for node in rep.result:
>                   self.items.extend(self.genitems(node))

/testbed/src/_pytest/main.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Session test_extended_report_deserialization0 exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
node = <Module test_extended_report_deserialization.py>

    def genitems(self, node):
        self.trace("genitems", node)
        if isinstance(node, nodes.Item):
            node.ihook.pytest_itemcollected(item=node)
            yield node
        else:
            assert isinstance(node, nodes.Collector)
>           rep = collect_one_node(node)

/testbed/src/_pytest/main.py:701: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collector = <Module test_extended_report_deserialization.py>

    def collect_one_node(collector):
        ihook = collector.ihook
        ihook.pytest_collectstart(collector=collector)
>       rep = ihook.pytest_make_collect_report(collector=collector)

/testbed/src/_pytest/runner.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_HookCaller 'pytest_make_collect_report'>, args = ()
kwargs = {'collector': <Module test_extended_report_deserialization.py>}
notincall = set()

    def __call__(self, *args, **kwargs):
        if args:
            raise TypeError("hook calling supports only keyword arguments")
        assert not self.is_historic()
        if self.spec and self.spec.argnames:
            notincall = (
                set(self.spec.argnames) - set(["__multicall__"]) - set(kwargs.keys())
            )
            if notincall:
                warnings.warn(
                    "Argument(s) {} which are declared in the hookspec "
                    "can not be found in this hook call".format(tuple(notincall)),
                    stacklevel=2,
                )
>       return self._hookexec(self, self.get_hookimpls(), kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.config.PytestPluginManager object at 0x7f89e8b0d7f0>
hook = <_HookCaller 'pytest_make_collect_report'>
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_extended_report_deserialization.py>}

    def _hookexec(self, hook, methods, kwargs):
        # called from all hookcaller instances.
        # enable_tracing will set its own wrapping function at self._inner_hookexec
>       return self._inner_hookexec(hook, methods, kwargs)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_make_collect_report'>
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_extended_report_deserialization.py>}

    def traced_hookexec(hook, hook_impls, kwargs):
        before(hook.name, hook_impls, kwargs)
        outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
        after(outcome, hook.name, hook_impls, kwargs)
>       return outcome.get_result()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e907a940>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'pluggy.callers._Result'>
func = <function PluginManager.add_hookcall_monitoring.<locals>.traced_hookexec.<locals>.<lambda> at 0x7f89e8d9d790>

    @classmethod
    def from_call(cls, func):
        __tracebackhide__ = True
        result = excinfo = None
        try:
>           result = func()

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook = <_HookCaller 'pytest_make_collect_report'>
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
kwargs = {'collector': <Module test_extended_report_deserialization.py>}

>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
        methods,
        kwargs,
        firstresult=hook.spec.opts.get("firstresult") if hook.spec else False,
    )

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
caller_kwargs = {'collector': <Module test_extended_report_deserialization.py>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
                        res = hook_impl.function(*args)
                        if res is not None:
                            results.append(res)
                            if firstresult:  # halt further impl calls
                                break
            except BaseException:
                excinfo = sys.exc_info()
        finally:
            if firstresult:  # first result hooks return a single value
                outcome = _Result(results[0] if results else None, excinfo)
            else:
                outcome = _Result(results, excinfo)
    
            # run all wrapper post-yield blocks
            for gen in reversed(teardowns):
                try:
>                   gen.send(outcome)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <CaptureManager _method='fd' _global_capturing=None _current_item=None>
collector = <Module test_extended_report_deserialization.py>

    @pytest.hookimpl(hookwrapper=True)
    def pytest_make_collect_report(self, collector):
        if isinstance(collector, pytest.File):
            self.resume_global_capture()
            outcome = yield
            self.suspend_global_capture()
            out, err = self.read_global_capture()
>           rep = outcome.get_result()

/testbed/src/_pytest/capture.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pluggy.callers._Result object at 0x7f89e907a5b0>

    def get_result(self):
        """Get the result(s) for this hook call.
    
        If the hook was marked as a ``firstresult`` only a single value
        will be returned otherwise a list of results.
        """
        __tracebackhide__ = True
        if self._excinfo is None:
            return self._result
        else:
            ex = self._excinfo
            if _py3:
>               raise ex[1].with_traceback(ex[2])

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/testbed/src/_pytest/runner.py'>>, <HookImpl plugin_name='capturemanager', plugin=<CaptureManager _method='fd' _global_capturing=None _current_item=None>>]
caller_kwargs = {'collector': <Module test_extended_report_deserialization.py>}
firstresult = True

    def _multicall(hook_impls, caller_kwargs, firstresult=False):
        """Execute a call into multiple python functions/methods and return the
        result(s).
    
        ``caller_kwargs`` comes from _HookCaller.__call__().
        """
        __tracebackhide__ = True
        results = []
        excinfo = None
        try:  # run impl and wrapper setup functions in a loop
            teardowns = []
            try:
                for hook_impl in reversed(hook_impls):
                    try:
                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]
                    except KeyError:
                        for argname in hook_impl.argnames:
                            if argname not in caller_kwargs:
                                raise HookCallError(
                                    "hook call must provide argument %r" % (argname,)
                                )
    
                    if hook_impl.hookwrapper:
                        try:
                            gen = hook_impl.function(*args)
                            next(gen)  # first yield
                            teardowns.append(gen)
                        except StopIteration:
                            _raise_wrapfail(gen, "did not yield")
                    else:
>                       res = hook_impl.function(*args)

/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/callers.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collector = <Module test_extended_report_deserialization.py>

    def pytest_make_collect_report(collector):
        call = CallInfo.from_call(lambda: list(collector.collect()), "collect")
        longrepr = None
        if not call.excinfo:
            outcome = "passed"
        else:
            skip_exceptions = [Skipped]
            unittest = sys.modules.get("unittest")
            if unittest is not None:
                skip_exceptions.append(unittest.SkipTest)
            if call.excinfo.errisinstance(tuple(skip_exceptions)):
                outcome = "skipped"
                r = collector._repr_failure_py(call.excinfo, "line").reprcrash
                longrepr = (str(r.path), r.lineno, r.message)
            else:
                outcome = "failed"
>               errorinfo = collector.repr_failure(call.excinfo)

/testbed/src/_pytest/runner.py:262: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Module test_extended_report_deserialization.py>
excinfo = <ExceptionInfo CollectError tblen=7>

    def repr_failure(self, excinfo):
        """ represent a collection failure. """
        if excinfo.errisinstance(self.CollectError):
            exc = excinfo.value
>           return str(exc.args[0])

/testbed/src/_pytest/nodes.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ExceptionChainRepr'> instance at 7f89e8ec9fa0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError

During handling of the above exception, another exception occurred:

self = <test_reports.TestReportSerialization object at 0x7f89e8b0dc70>
testdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_extended_report_deserialization0')>

    def test_extended_report_deserialization(self, testdir):
        """This test came originally from test_remote.py in xdist (ca03269)."""
>       reprec = testdir.inline_runsource("qwe abc")

/testbed/testing/test_reports.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/testbed/src/_pytest/pytester.py:764: in inline_runsource
    return self.inline_run(*values)
/testbed/src/_pytest/pytester.py:830: in inline_run
    ret = pytest.main(list(args), plugins=plugins)
/testbed/src/_pytest/config/__init__.py:78: in main
    return config.hook.pytest_cmdline_main(config=config)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>
    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
/testbed/src/_pytest/main.py:228: in pytest_cmdline_main
    return wrap_session(config, _main)
/testbed/src/_pytest/main.py:211: in wrap_session
    config.notify_exception(excinfo, config.option)
/testbed/src/_pytest/config/__init__.py:750: in notify_exception
    res = self.hook.pytest_internalerror(excrepr=excrepr, excinfo=excinfo)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:337: in traced_hookexec
    return outcome.get_result()
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:335: in <lambda>
    outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>
    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(
/testbed/src/_pytest/terminal.py:347: in pytest_internalerror
    for line in str(excrepr).split("\n"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprExceptionInfo'> instance at 7f89e8b06d60>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_extended_report_deserialization0
collected 0 items

============================ no tests ran in 0.08s =============================
_________ TestReportSerialization.test_chained_exceptions[TestReport] __________

self = <test_reports.TestReportSerialization object at 0x7f89e93c7520>
testdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_chained_exceptions0')>
tw_mock = <conftest.tw_mock.<locals>.TWMock object at 0x7f89e9295580>
report_class = <class '_pytest.reports.TestReport'>

    @pytest.mark.parametrize("report_class", [TestReport, CollectReport])
    def test_chained_exceptions(self, testdir, tw_mock, report_class):
        """Check serialization/deserialization of report objects containing chained exceptions (#5786)"""
        testdir.makepyfile(
            """
            def foo():
                raise ValueError('value error')
            def test_a():
                try:
                    foo()
                except ValueError as e:
                    raise RuntimeError('runtime error') from e
            if {error_during_import}:
                test_a()
        """.format(
                error_during_import=report_class is CollectReport
            )
        )
    
        reprec = testdir.inline_run()
        if report_class is TestReport:
            reports = reprec.getreports("pytest_runtest_logreport")
            # we have 3 reports: setup/call/teardown
            assert len(reports) == 3
            # get the call report
            report = reports[1]
        else:
            assert report_class is CollectReport
            # two collection reports: session and test file
            reports = reprec.getreports("pytest_collectreport")
            assert len(reports) == 2
            report = reports[1]
    
        def check_longrepr(longrepr):
            """Check the attributes of the given longrepr object according to the test file.
    
            We can get away with testing both CollectReport and TestReport with this function because
            the longrepr objects are very similar.
            """
            assert isinstance(longrepr, ExceptionChainRepr)
            assert longrepr.sections == [("title", "contents", "=")]
            assert len(longrepr.chain) == 2
            entry1, entry2 = longrepr.chain
            tb1, fileloc1, desc1 = entry1
            tb2, fileloc2, desc2 = entry2
    
            assert "ValueError('value error')" in str(tb1)
            assert "RuntimeError('runtime error')" in str(tb2)
    
            assert (
                desc1
                == "The above exception was the direct cause of the following exception:"
            )
            assert desc2 is None
    
        assert report.failed
        assert len(report.sections) == 0
        report.longrepr.addsection("title", "contents", "=")
>       check_longrepr(report.longrepr)

/testbed/testing/test_reports.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/testbed/testing/test_reports.py:292: in check_longrepr
    assert "ValueError('value error')" in str(tb1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprTraceback'> instance at 7f89e8d47490>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_chained_exceptions0
collected 1 item

test_chained_exceptions.py F                                             [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

    def test_a():
        try:
>           foo()

test_chained_exceptions.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def foo():
>       raise ValueError('value error')
E       ValueError: value error

test_chained_exceptions.py:2: ValueError

The above exception was the direct cause of the following exception:

    def test_a():
        try:
            foo()
        except ValueError as e:
>           raise RuntimeError('runtime error') from e
E           RuntimeError: runtime error

test_chained_exceptions.py:7: RuntimeError
============================== 1 failed in 0.01s ===============================
________ TestReportSerialization.test_chained_exceptions[CollectReport] ________

self = <test_reports.TestReportSerialization object at 0x7f89e8c2c340>
testdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_chained_exceptions1')>
tw_mock = <conftest.tw_mock.<locals>.TWMock object at 0x7f89e8c2c070>
report_class = <class '_pytest.reports.CollectReport'>

    @pytest.mark.parametrize("report_class", [TestReport, CollectReport])
    def test_chained_exceptions(self, testdir, tw_mock, report_class):
        """Check serialization/deserialization of report objects containing chained exceptions (#5786)"""
        testdir.makepyfile(
            """
            def foo():
                raise ValueError('value error')
            def test_a():
                try:
                    foo()
                except ValueError as e:
                    raise RuntimeError('runtime error') from e
            if {error_during_import}:
                test_a()
        """.format(
                error_during_import=report_class is CollectReport
            )
        )
    
        reprec = testdir.inline_run()
        if report_class is TestReport:
            reports = reprec.getreports("pytest_runtest_logreport")
            # we have 3 reports: setup/call/teardown
            assert len(reports) == 3
            # get the call report
            report = reports[1]
        else:
            assert report_class is CollectReport
            # two collection reports: session and test file
            reports = reprec.getreports("pytest_collectreport")
            assert len(reports) == 2
            report = reports[1]
    
        def check_longrepr(longrepr):
            """Check the attributes of the given longrepr object according to the test file.
    
            We can get away with testing both CollectReport and TestReport with this function because
            the longrepr objects are very similar.
            """
            assert isinstance(longrepr, ExceptionChainRepr)
            assert longrepr.sections == [("title", "contents", "=")]
            assert len(longrepr.chain) == 2
            entry1, entry2 = longrepr.chain
            tb1, fileloc1, desc1 = entry1
            tb2, fileloc2, desc2 = entry2
    
            assert "ValueError('value error')" in str(tb1)
            assert "RuntimeError('runtime error')" in str(tb2)
    
            assert (
                desc1
                == "The above exception was the direct cause of the following exception:"
            )
            assert desc2 is None
    
        assert report.failed
        assert len(report.sections) == 0
        report.longrepr.addsection("title", "contents", "=")
>       check_longrepr(report.longrepr)

/testbed/testing/test_reports.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/testbed/testing/test_reports.py:292: in check_longrepr
    assert "ValueError('value error')" in str(tb1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <<class '_pytest._code.code.ReprTraceback'> instance at 7f89e8d4ceb0>

    def __str__(self):
        # FYI this is called from pytest-xdist's serialization of exception
        # information.
>       io = io.StringIO()
E       UnboundLocalError: local variable 'io' referenced before assignment

/testbed/src/_pytest/_code/code.py:863: UnboundLocalError
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_chained_exceptions1
collected 0 items / 1 errors

==================================== ERRORS ====================================
_________________ ERROR collecting test_chained_exceptions.py __________________
test_chained_exceptions.py:5: in test_a
    foo()
test_chained_exceptions.py:2: in foo
    raise ValueError('value error')
E   ValueError: value error

The above exception was the direct cause of the following exception:
test_chained_exceptions.py:9: in <module>
    test_a()
test_chained_exceptions.py:7: in test_a
    raise RuntimeError('runtime error') from e
E   RuntimeError: runtime error
!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.03s ===============================
==================================== PASSES ====================================
_______ TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct ________
----------------------------- Captured stdout call -----------------------------
def xyz():
    try:
        raise ValueError
    except somenoname:
______ TestTraceback_f_g_h.test_traceback_filter_selective[<lambda>-True] ______
----------------------------- Captured stdout call -----------------------------
old: [<TracebackEntry /testbed/src/_pytest/python_api.py:710>, <TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
new: [<TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
_____ TestTraceback_f_g_h.test_traceback_filter_selective[<lambda>-False] ______
----------------------------- Captured stdout call -----------------------------
old: [<TracebackEntry /testbed/src/_pytest/python_api.py:710>, <TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
new: [<TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
___ TestTraceback_f_g_h.test_traceback_filter_selective[tracebackhide2-True] ___
----------------------------- Captured stdout call -----------------------------
old: [<TracebackEntry /testbed/src/_pytest/python_api.py:710>, <TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
new: [<TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
__ TestTraceback_f_g_h.test_traceback_filter_selective[tracebackhide3-False] ___
----------------------------- Captured stdout call -----------------------------
old: [<TracebackEntry /testbed/src/_pytest/python_api.py:710>, <TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
new: [<TracebackEntry /testbed/testing/code/test_excinfo.py:190>, <TracebackEntry /testbed/testing/code/test_excinfo.py:185>, <TracebackEntry /testbed/testing/code/test_excinfo.py:179>]
________________ TestFormattedExcinfo.test_traceback_repr_style ________________
----------------------------- Captured stdout call -----------------------------

    def f():
>       g()

(<object object at 0x7f89e9729300>, '/tmp/pytest-of-root/pytest-0/test_traceback_repr_style0/mod.py')
:3: 
('_ ', None)
(<object object at 0x7f89e9729300>, '/tmp/pytest-of-root/pytest-0/test_traceback_repr_style0/mod.py')
:5: in g
    h()
(<object object at 0x7f89e9729300>, '/tmp/pytest-of-root/pytest-0/test_traceback_repr_style0/mod.py')
:7: in h
    i()
('_ ', None)

    def i():
>       raise ValueError()
E       ValueError

(<object object at 0x7f89e9729300>, '/tmp/pytest-of-root/pytest-0/test_traceback_repr_style0/mod.py')
:9: ValueError
___________________ TestFormattedExcinfo.test_exc_chain_repr ___________________
----------------------------- Captured stdout call -----------------------------

    def f():
        try:
>           g()

(<object object at 0x7f89e97294c0>, '/tmp/pytest-of-root/pytest-0/test_exc_chain_repr0/mod.py')
:6: 
('_ ', None)

    def g():
>       raise ValueError()
E       ValueError

(<object object at 0x7f89e97294c0>, '/tmp/pytest-of-root/pytest-0/test_exc_chain_repr0/mod.py')
:12: ValueError

The above exception was the direct cause of the following exception:

    def f():
        try:
            g()
        except Exception as e:
>           raise Err() from e
E           test_exc_chain_repr0.mod.Err

(<object object at 0x7f89e97294c0>, '/tmp/pytest-of-root/pytest-0/test_exc_chain_repr0/mod.py')
:8: Err

During handling of the above exception, another exception occurred:

    def f():
        try:
            g()
        except Exception as e:
            raise Err() from e
        finally:
>           h()

(<object object at 0x7f89e97294c0>, '/tmp/pytest-of-root/pytest-0/test_exc_chain_repr0/mod.py')
:10: 
('_ ', None)

    def h():
>       raise AttributeError()
E       AttributeError

(<object object at 0x7f89e97294c0>, '/tmp/pytest-of-root/pytest-0/test_exc_chain_repr0/mod.py')
:15: AttributeError
_______ TestFormattedExcinfo.test_exc_repr_chain_suppression[from_none] ________
----------------------------- Captured stdout call -----------------------------

    def f():
        try:
            g()
        except Exception:
>           raise AttributeError() from None
E           AttributeError

(<object object at 0x7f89e97295e0>, '/tmp/pytest-of-root/pytest-0/test_exc_repr_chain_suppressio0/mod.py')
:6: AttributeError
___ TestFormattedExcinfo.test_exc_repr_chain_suppression[explicit_suppress] ____
----------------------------- Captured stdout call -----------------------------

    def f():
        try:
            g()
        except Exception:
>           raise AttributeError()
E           AttributeError

(<object object at 0x7f89e9729820>, '/tmp/pytest-of-root/pytest-0/test_exc_repr_chain_suppressio1/mod.py')
:6: AttributeError
___________________________ test_match_raises_error ____________________________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_match_raises_error0
collected 1 item

test_match_raises_error.py F                                             [100%]

=================================== FAILURES ===================================
______________________________ test_division_zero ______________________________

    def test_division_zero():
        with pytest.raises(ZeroDivisionError) as excinfo:
            0 / 0
>       excinfo.match(r'[123]+')
E       AssertionError: Pattern '[123]+' not found in 'division by zero'

test_match_raises_error.py:5: AssertionError
============================== 1 failed in 0.01s ===============================
_______________________________ test_cwd_deleted _______________________________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_cwd_deleted0
collected 1 item

test_cwd_deleted.py F                                                    [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________

tmpdir = local('/tmp/pytest-of-root/pytest-0/basetemp/test0')

    def test(tmpdir):
        tmpdir.chdir()
        tmpdir.remove()
>       assert False
E       assert False

/tmp/pytest-of-root/pytest-0/test_cwd_deleted0/test_cwd_deleted.py:4: AssertionError
============================== 1 failed in 0.01s ===============================
_________ TestReportSerialization.test_xdist_longrepr_to_str_issue_241 _________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_xdist_longrepr_to_str_issue_2410
collected 2 items

test_xdist_longrepr_to_str_issue_241.py F.                               [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

>   def test_a(): assert False
E   assert False

test_xdist_longrepr_to_str_issue_241.py:1: AssertionError
========================= 1 failed, 1 passed in 0.01s ==========================
_______ TestReportSerialization.test_xdist_report_longrepr_reprcrash_130 _______
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_xdist_report_longrepr_reprcrash_1300
collected 1 item

test_xdist_report_longrepr_reprcrash_130.py F                            [100%]

=================================== FAILURES ===================================
__________________________________ test_fail ___________________________________

    def test_fail():
>       assert False, 'Expected Message'
E       AssertionError: Expected Message
E       assert False

test_xdist_report_longrepr_reprcrash_130.py:2: AssertionError
============================== 1 failed in 0.01s ===============================
__________ TestReportSerialization.test_reprentries_serialization_170 __________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_reprentries_serialization_1700
collected 1 item

test_reprentries_serialization_170.py F                                  [100%]

=================================== FAILURES ===================================
_______________________________ test_repr_entry ________________________________

    def test_repr_entry():
        x = 0
>       assert x
E       assert 0

x          = 0

test_reprentries_serialization_170.py:3: AssertionError
============================== 1 failed in 0.01s ===============================
__________ TestReportSerialization.test_reprentries_serialization_196 __________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_reprentries_serialization_1960
collected 1 item

test_reprentries_serialization_196.py F                                  [100%]

=================================== FAILURES ===================================
____________________________ test_repr_entry_native ____________________________
Traceback (most recent call last):
  File "/tmp/pytest-of-root/pytest-0/test_reprentries_serialization_1960/test_reprentries_serialization_196.py", line 3, in test_repr_entry_native
    assert x
AssertionError: assert 0
============================== 1 failed in 0.01s ===============================
_______________ TestReportSerialization.test_itemreport_outcomes _______________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_itemreport_outcomes0
collected 6 items

test_itemreport_outcomes.py .Fssxx                                       [100%]

=================================== FAILURES ===================================
__________________________________ test_fail ___________________________________

>   def test_fail(): 0/0
E   ZeroDivisionError: division by zero

test_itemreport_outcomes.py:3: ZeroDivisionError
============== 1 failed, 1 passed, 2 skipped, 2 xfailed in 0.01s ===============
______________ TestReportSerialization.test_collectreport_passed _______________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_collectreport_passed0
collected 1 item

test_collectreport_passed.py .                                           [100%]

============================== 1 passed in 0.01s ===============================
__________________ TestReportSerialization.test_paths_support __________________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_paths_support0
collected 1 item

test_paths_support.py F                                                  [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

    def test_a():
>       assert False
E       assert False

test_paths_support.py:2: AssertionError
============================== 1 failed in 0.01s ===============================
_____________ TestReportSerialization.test_deserialization_failure _____________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_deserialization_failure0
collected 1 item

test_deserialization_failure.py F                                        [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

    def test_a():
>       assert False
E       assert False

test_deserialization_failure.py:2: AssertionError
============================== 1 failed in 0.01s ===============================
__________________________ TestHooks.test_test_report __________________________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_test_report0
collected 2 items

test_test_report.py F.                                                   [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

>   def test_a(): assert False
E   assert False

test_test_report.py:1: AssertionError
========================= 1 failed, 1 passed in 0.02s ==========================
________________________ TestHooks.test_collect_report _________________________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_collect_report0
collected 2 items

test_collect_report.py F.                                                [100%]

=================================== FAILURES ===================================
____________________________________ test_a ____________________________________

>   def test_a(): assert False
E   assert False

test_collect_report.py:1: AssertionError
========================= 1 failed, 1 passed in 0.01s ==========================
________ TestHooks.test_invalid_report_types[pytest_runtest_logreport] _________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_invalid_report_types0
collected 1 item

test_invalid_report_types.py .                                           [100%]

============================== 1 passed in 0.01s ===============================
__________ TestHooks.test_invalid_report_types[pytest_collectreport] ___________
----------------------------- Captured stdout call -----------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-5.1.2.dev12+g955e54221.d20250505, py-1.11.0, pluggy-0.13.1
rootdir: /tmp/pytest-of-root/pytest-0/test_invalid_report_types1
collected 1 item

test_invalid_report_types.py .                                           [100%]

============================== 1 passed in 0.01s ===============================
=========================== short test summary info ============================
PASSED testing/code/test_code.py::test_ne
PASSED testing/code/test_code.py::test_code_gives_back_name_for_not_existing_file
PASSED testing/code/test_code.py::test_code_with_class
PASSED testing/code/test_code.py::test_code_fullsource
PASSED testing/code/test_code.py::test_code_source
PASSED testing/code/test_code.py::test_frame_getsourcelineno_myself
PASSED testing/code/test_code.py::test_getstatement_empty_fullsource
PASSED testing/code/test_code.py::test_code_from_func
PASSED testing/code/test_code.py::test_unicode_handling
PASSED testing/code/test_code.py::test_code_getargs
PASSED testing/code/test_code.py::test_frame_getargs
PASSED testing/code/test_code.py::TestExceptionInfo::test_bad_getsource
PASSED testing/code/test_code.py::TestExceptionInfo::test_from_current_with_missing
PASSED testing/code/test_code.py::TestTracebackEntry::test_getsource
PASSED testing/code/test_code.py::TestReprFuncArgs::test_not_raise_exception_with_mixed_encoding
PASSED testing/code/test_excinfo.py::test_excinfo_simple
PASSED testing/code/test_excinfo.py::test_excinfo_from_exc_info_simple
PASSED testing/code/test_excinfo.py::test_excinfo_getstatement
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entries
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_entry_getsource_in_construct
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-True]
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[<lambda>-False]
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide2-True]
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_filter_selective[tracebackhide3-False]
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_recursion_index
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_no_recursion_index
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_getcrashentry_empty
PASSED testing/code/test_excinfo.py::test_excinfo_exconly
PASSED testing/code/test_excinfo.py::test_excinfo_repr_str
PASSED testing/code/test_excinfo.py::test_excinfo_for_later
PASSED testing/code/test_excinfo.py::test_excinfo_errisinstance
PASSED testing/code/test_excinfo.py::test_excinfo_no_sourcecode
PASSED testing/code/test_excinfo.py::test_entrysource_Queue_example
PASSED testing/code/test_excinfo.py::test_codepath_Queue_example
PASSED testing/code/test_excinfo.py::test_match_succeeds
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_excinfo
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_not_existing
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_many_line_source_not_existing
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_source_failing_fullsource
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_error
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_with_exception_in_class_property
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_local_truncated
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines2
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_lines_var_kw_args
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_short
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_tracebackentry_no
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_tbfilter
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_short_no_source
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_and_excinfo
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_with_invalid_cwd
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_addouterr
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_getrepr
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_missing_source
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_incomplete_source
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_toterminal_long_filenames
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions0]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions1]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions2]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions3]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions4]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions5]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions6]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions7]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions8]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions9]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions10]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions11]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions12]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions13]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions14]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions15]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions16]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions17]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions18]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions19]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions20]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions21]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions22]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_format_excinfo[reproptions23]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_traceback_repr_style
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[from_none]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_repr_chain_suppression[explicit_suppress]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[cause-The above exception was the direct cause of the following exception:]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_without_traceback[context-During handling of the above exception, another exception occurred:]
PASSED testing/code/test_excinfo.py::TestFormattedExcinfo::test_exc_chain_repr_cycle
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-short]
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[None-long]
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-short]
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf8-long]
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-short]
PASSED testing/code/test_excinfo.py::test_repr_traceback_with_unicode[utf16-long]
PASSED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_cut_excludepath
PASSED testing/code/test_excinfo.py::test_match_raises_error
PASSED testing/code/test_excinfo.py::test_cwd_deleted
PASSED testing/test_reports.py::TestReportSerialization::test_xdist_longrepr_to_str_issue_241
PASSED testing/test_reports.py::TestReportSerialization::test_xdist_report_longrepr_reprcrash_130
PASSED testing/test_reports.py::TestReportSerialization::test_reprentries_serialization_170
PASSED testing/test_reports.py::TestReportSerialization::test_reprentries_serialization_196
PASSED testing/test_reports.py::TestReportSerialization::test_itemreport_outcomes
PASSED testing/test_reports.py::TestReportSerialization::test_collectreport_passed
PASSED testing/test_reports.py::TestReportSerialization::test_paths_support
PASSED testing/test_reports.py::TestReportSerialization::test_deserialization_failure
PASSED testing/test_reports.py::TestHooks::test_test_report
PASSED testing/test_reports.py::TestHooks::test_collect_report
PASSED testing/test_reports.py::TestHooks::test_invalid_report_types[pytest_runtest_logreport]
PASSED testing/test_reports.py::TestHooks::test_invalid_report_types[pytest_collectreport]
SKIPPED [1] /testbed/testing/code/test_excinfo.py:251: could not import 'decorator': No module named 'decorator'
SKIPPED [1] /testbed/testing/code/test_excinfo.py:348: could not import 'jinja2': No module named 'jinja2'
FAILED testing/code/test_excinfo.py::TestTraceback_f_g_h::test_traceback_only_specific_recursion_errors
FAILED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_excinfo_reprcrash
FAILED testing/code/test_excinfo.py::TestFormattedExcinfo::test_repr_traceback_recursion
FAILED testing/code/test_excinfo.py::TestFormattedExcinfo::test_reprexcinfo_unicode
FAILED testing/code/test_excinfo.py::test_exception_repr_extraction_error_on_recursion
FAILED testing/code/test_excinfo.py::test_no_recursion_index_on_recursion_error
FAILED testing/test_reports.py::TestReportSerialization::test_collectreport_fail
FAILED testing/test_reports.py::TestReportSerialization::test_extended_report_deserialization
FAILED testing/test_reports.py::TestReportSerialization::test_chained_exceptions[TestReport]
FAILED testing/test_reports.py::TestReportSerialization::test_chained_exceptions[CollectReport]
================== 10 failed, 115 passed, 2 skipped in 2.62s ===================
+ git checkout 955e54221008aba577ecbaefa15679f6777d3bf8 testing/code/test_code.py testing/code/test_excinfo.py testing/conftest.py testing/test_reports.py
Updated 4 paths from c34eb7a31

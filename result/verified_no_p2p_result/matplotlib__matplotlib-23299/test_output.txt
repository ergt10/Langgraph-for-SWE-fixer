+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/__init__.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39
Merge: 0d39a4f8bf 01c3ce1e01
Author: Tim Hoffmann <2836374+timhoffm@users.noreply.github.com>
Date:   Sun Jun 26 00:58:46 2022 +0200

    Merge pull request #23347 from anntzer/gtkcairo
    
    Simplify/improve check for pycairo in Gtk-based backends.

+ git diff 3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..b9f2d0ebbd 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1095,10 +1095,14 @@ def rc_context(rc=None, fname=None):
             rcParams.update(rc)
         yield
     finally:
-        dict.update(rcParams, orig)  # Revert to the original rcs.
+        # Revert to the original rcs.
+        # Do not use dict.update, which would not restore e.g. the internal
+        # state of the RcParams instance.
+        rcParams = orig
 
 
 def use(backend, *, force=True):
+
     """
     Select the backend used for rendering and GUI integration.
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (10.0.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (2.8.2)
Requirement already satisfied: setuptools_scm>=4 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505) (4.7.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.6.0.dev2573+g3eadeacc06
    Uninstalling matplotlib-3.6.0.dev2573+g3eadeacc06:
      Successfully uninstalled matplotlib-3.6.0.dev2573+g3eadeacc06
  DEPRECATION: Legacy editable install of matplotlib==3.6.0.dev2573+g3eadeacc06.d20250505 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for matplotlib
Successfully installed matplotlib-3.6.0.dev2573+g3eadeacc06.d20250505
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39 lib/matplotlib/tests/test_rcparams.py
Updated 0 paths from 3a8a4fa386
+ git apply -v -
Checking patch lib/matplotlib/tests/test_rcparams.py...
Applied patch lib/matplotlib/tests/test_rcparams.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_rcparams.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: xdist-3.6.1, timeout-2.3.1, rerunfailures-14.0, cov-5.0.0
collected 208 items

lib/matplotlib/tests/test_rcparams.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 16%]
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 50%]
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE [ 85%]
EEEEEEEEEEEEEEEEEEEEEEEEEEEEsE                                           [100%]

==================================== ERRORS ====================================
_______________________ ERROR at setup of test_rcparams ________________________

request = <SubRequest 'mpl_test_settings' for <Function test_rcparams>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________________ ERROR at setup of test_RcParams_class _____________________

request = <SubRequest 'mpl_test_settings' for <Function test_RcParams_class>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________________ ERROR at setup of test_rcparams_update ____________________

request = <SubRequest 'mpl_test_settings' for <Function test_rcparams_update>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________________ ERROR at setup of test_rcparams_init _____________________

request = <SubRequest 'mpl_test_settings' for <Function test_rcparams_init>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______________________ ERROR at setup of test_Bug_2543 ________________________

request = <SubRequest 'mpl_test_settings' for <Function test_Bug_2543>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________ ERROR at setup of test_legend_colors[same facecolor] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[same facecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__________ ERROR at setup of test_legend_colors[inherited facecolor] ___________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[inherited facecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__________ ERROR at setup of test_legend_colors[different facecolor0] __________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[different facecolor0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________ ERROR at setup of test_legend_colors[same edgecolor] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[same edgecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__________ ERROR at setup of test_legend_colors[inherited edgecolor] ___________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[inherited edgecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__________ ERROR at setup of test_legend_colors[different facecolor1] __________

request = <SubRequest 'mpl_test_settings' for <Function test_legend_colors[different facecolor1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________________ ERROR at setup of test_mfc_rcparams ______________________

request = <SubRequest 'mpl_test_settings' for <Function test_mfc_rcparams>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________________ ERROR at setup of test_mec_rcparams ______________________

request = <SubRequest 'mpl_test_settings' for <Function test_mec_rcparams>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______________ ERROR at setup of test_axes_titlecolor_rcparams ________________

request = <SubRequest 'mpl_test_settings' for <Function test_axes_titlecolor_rcparams>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______________________ ERROR at setup of test_Issue_1713 _______________________

request = <SubRequest 'mpl_test_settings' for <Function test_Issue_1713>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________________ ERROR at setup of test_animation_frame_formats ________________

request = <SubRequest 'mpl_test_settings' for <Function test_animation_frame_formats>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_________ ERROR at setup of test_validator_valid[validate_bool-t-True] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-t-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_________ ERROR at setup of test_validator_valid[validate_bool-y-True] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-y-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-yes-True] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-yes-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-on-True] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-on-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_bool-true-True] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-true-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-1-True0] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-1-True0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-1-True1] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-1-True1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_bool-True-True] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-True-True]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-f-False] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-f-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-n-False] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-n-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-no-False] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-no-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_bool-off-False] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-off-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[validate_bool-false-False] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-false-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-0-False0] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-0-False0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_bool-0-False1] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-0-False1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[validate_bool-False-False] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_bool-False-False]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[validate_strlist--target16] ______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist--target16]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_strlist-a,b-target17] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-a,b-target17]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_strlist-aardvark-target18] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-aardvark-target18]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_strlist-aardvark, -target19] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-aardvark, -target19]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_strlist-aardvark, ,-target20] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-aardvark, ,-target20]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_strlist-arg21-target21] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-arg21-target21]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_strlist-arg22-target22] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-arg22-target22]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_strlist-arg23-target23] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-arg23-target23]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_strlist-arg24-target24] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_strlist-arg24-target24]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_intlist-1, 2-target25] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_intlist-1, 2-target25]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_intlist-arg26-target26] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_intlist-arg26-target26]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_intlist-arg27-target27] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_intlist-arg27-target27]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_intlist-arg28-target28] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_intlist-arg28-target28]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_intlist-arg29-target29] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_intlist-arg29-target29]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_floatlist-1.5, 2.5-target30] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_floatlist-1.5, 2.5-target30]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_floatlist-arg31-target31] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_floatlist-arg31-target31]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_floatlist-arg32-target32] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_floatlist-arg32-target32]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_floatlist-arg33-target33] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_floatlist-arg33-target33]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_floatlist-arg34-target34] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_floatlist-arg34-target34]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_cycler-cycler("color", "rgb")-target35] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-cycler("color", "rgb")-target35]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_cycler-arg36-target36] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-arg36-target36]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_cycler-(cycler("color", ["r", "g", "b"]) +\n                          cycler("mew", [2, 3, 5]))-target37] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-(cycler("color", ["r", "g", "b"]) +\n                          cycler("mew", [2, 3, 5]))-target37]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_cycler-cycler(c='rgb', lw=[1, 2, 3])-target38] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-cycler(c='rgb', lw=[1, 2, 3])-target38]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_cycler-cycler('c', 'rgb') * cycler('linestyle', ['-', '--'])-target39] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-cycler('c', 'rgb') * cycler('linestyle', ['-', '--'])-target39]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_cycler-arg40-target40] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-arg40-target40]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_cycler-arg41-target41] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_cycler-arg41-target41]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_hatch---|---|] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hatch---|---|]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_hatch-\\oO-\\oO] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hatch-\\oO-\\oO]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____ ERROR at setup of test_validator_valid[validate_hatch-/+*/.x-/+*/.x] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hatch-/+*/.x-/+*/.x]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___________ ERROR at setup of test_validator_valid[validate_hatch--] ___________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hatch--]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_colorlist-r,g,b-target46] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-r,g,b-target46]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_colorlist-arg47-target47] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-arg47-target47]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_colorlist-r, ,-target48] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-r, ,-target48]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_colorlist-arg49-target49] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-arg49-target49]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_colorlist-arg50-target50] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-arg50-target50]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_colorlist-arg51-target51] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_colorlist-arg51-target51]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_color-None-none] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-None-none]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_color-none-none] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-none-none]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_color-AABBCC-#AABBCC] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-AABBCC-#AABBCC]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_color-AABBCC00-#AABBCC00] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-AABBCC00-#AABBCC00]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[validate_color-tab:blue-tab:blue] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-tab:blue-tab:blue]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_color-C12-C12] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-C12-C12]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_color-(0, 1, 0)-target58] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-(0, 1, 0)-target58]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_color-arg59-target59] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-arg59-target59]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_color-(0, 1, 0, 1)-target60] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-(0, 1, 0, 1)-target60]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[validate_color-arg61-target61] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_color-arg61-target61]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_color_or_linecolor-linecolor-linecolor] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_color_or_linecolor-linecolor-linecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_color_or_linecolor-markerfacecolor-markerfacecolor] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_color_or_linecolor-markerfacecolor-markerfacecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_color_or_linecolor-mfc-markerfacecolor] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_color_or_linecolor-mfc-markerfacecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_color_or_linecolor-markeredgecolor-markeredgecolor] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_color_or_linecolor-markeredgecolor-markeredgecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_color_or_linecolor-mec-markeredgecolor] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_color_or_linecolor-mec-markeredgecolor]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____ ERROR at setup of test_validator_valid[validate_hist_bins-auto-auto] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-auto-auto]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_hist_bins-fd-fd] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-fd-fd]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[validate_hist_bins-10-10] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-10-10]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[validate_hist_bins-1, 2, 3-target70] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-1, 2, 3-target70]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_hist_bins-arg71-target71] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-arg71-target71]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_hist_bins-arg72-target72] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_hist_bins-arg72-target72]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____ ERROR at setup of test_validator_valid[validate_markevery-None-None] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-None-None]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[validate_markevery-1-1] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-1-1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[validate_markevery-0.1-0.1] ______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-0.1-0.1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_markevery-arg76-target76] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-arg76-target76]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_markevery-arg77-target77] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-arg77-target77]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_markevery-arg78-target78] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-arg78-target78]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_markevery-arg79-target79] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-arg79-target79]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[validate_markevery-arg80-target80] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[validate_markevery-arg80-target80]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[_validate_linestyle----] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle----]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_valid[_validate_linestyle-solid-solid] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-solid-solid]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[_validate_linestyle------] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle------]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-dashed-dashed] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-dashed-dashed]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______ ERROR at setup of test_validator_valid[_validate_linestyle--.--.] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle--.--.]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_valid[_validate_linestyle-dashdot-dashdot] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-dashdot-dashdot]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[_validate_linestyle-:-:] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-:-:]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-dotted-dotted] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-dotted-dotted]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validator_valid[_validate_linestyle--] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle--]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validator_valid[_validate_linestyle- - ] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle- - ]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[_validate_linestyle-None-none] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-None-none]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_valid[_validate_linestyle-none-none] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-none-none]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-DoTtEd-dotted] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-DoTtEd-dotted]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-1, 3-target94] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-1, 3-target94]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-arg95-target95] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-arg95-target95]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-arg96-target96] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-arg96-target96]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-arg97-target97] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-arg97-target97]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_valid[_validate_linestyle-arg98-target98] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_valid[_validate_linestyle-arg98-target98]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_bool-aardvark-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_bool-aardvark-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____ ERROR at setup of test_validator_invalid[validate_bool-2-ValueError] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_bool-2-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_invalid[validate_bool--1-ValueError] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_bool--1-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_invalid[validate_bool-arg3-ValueError] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_bool-arg3-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_strlist-arg4-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_strlist-arg4-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_invalid[validate_strlist-1-ValueError] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_strlist-1-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_strlist-arg6-MatplotlibDeprecationWarning] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_strlist-arg6-MatplotlibDeprecationWarning]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_strlist-arg7-MatplotlibDeprecationWarning] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_strlist-arg7-MatplotlibDeprecationWarning]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_intlist-aardvark-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_intlist-aardvark-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_intlist-arg9-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_intlist-arg9-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_intlist-arg10-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_intlist-arg10-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_floatlist-aardvark-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_floatlist-aardvark-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_floatlist-arg12-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_floatlist-arg12-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_floatlist-arg13-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_floatlist-arg13-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_floatlist-arg14-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_floatlist-arg14-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_floatlist-None-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_floatlist-None-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_invalid[validate_cycler-4-ValueError] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-4-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler("bleh, [])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler("bleh, [])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-Cycler("linewidth", [1, 2, 3])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-Cycler("linewidth", [1, 2, 3])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j) for j in ['r', 'b']])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j) for j in ['r', 'b']])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler('c', [j. __class__(j) for j in ['r', 'b']])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler('c', [j. __class__(j) for j in ['r', 'b']])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler('c', [j.\t__class__(j) for j in ['r', 'b']])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler('c', [j.\t__class__(j) for j in ['r', 'b']])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler('c', [j.\x0c__class__(j) for j in ['r', 'b']])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler('c', [j.\x0c__class__(j) for j in ['r', 'b']])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j).lower() for j in ['r', 'b']])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j).lower() for j in ['r', 'b']])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_cycler-1 + 2-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-1 + 2-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-os.system("echo Gotcha")-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-os.system("echo Gotcha")-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-import os-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-import os-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-def badjuju(a): return a; badjuju(cycler("color", "rgb"))-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-def badjuju(a): return a; badjuju(cycler("color", "rgb"))-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler("waka", [1, 2, 3])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler("waka", [1, 2, 3])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler(c=[1, 2, 3])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler(c=[1, 2, 3])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_cycler-cycler(lw=['a', 'b', 'c'])-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-cycler(lw=['a', 'b', 'c'])-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_cycler-arg31-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-arg31-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_cycler-arg32-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_cycler-arg32-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_invalid[validate_hatch---_-ValueError] ____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_hatch---_-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_invalid[validate_hatch-8-ValueError] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_hatch-8-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____ ERROR at setup of test_validator_invalid[validate_hatch-X-ValueError] _____

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_hatch-X-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_colorlist-fish-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_colorlist-fish-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_color-tab:veryblue-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_color-tab:veryblue-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__ ERROR at setup of test_validator_invalid[validate_color-(0, 1)-ValueError] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_color-(0, 1)-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_color-(0, 1, 0, 1, 0)-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_color-(0, 1, 0, 1, 0)-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_color-(0, 1, none)-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_color-(0, 1, none)-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_color-(0, 1, "0.5")-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_color-(0, 1, "0.5")-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_color_or_linecolor-line-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_color_or_linecolor-line-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_color_or_linecolor-marker-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_color_or_linecolor-marker-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_hist_bins-aardvark-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_hist_bins-aardvark-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg45-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg45-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg46-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg46-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg47-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg47-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg48-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg48-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg49-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg49-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg50-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg50-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg51-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg51-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg52-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg52-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg53-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg53-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-abc-TypeError0] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-abc-TypeError0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg55-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg55-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg56-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg56-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg57-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg57-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg58-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg58-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-abc-TypeError1] __

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-abc-TypeError1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___ ERROR at setup of test_validator_invalid[validate_markevery-a-TypeError] ___

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-a-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[validate_markevery-arg61-TypeError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[validate_markevery-arg61-TypeError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-aardvark-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-aardvark-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-dotted-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-dotted-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-\xff\xfed\x00o\x00t\x00t\x00e\x00d\x00-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-\xff\xfed\x00o\x00t\x00t\x00e\x00d\x00-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-arg65-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-arg65-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-1.23-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-1.23-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-arg67-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-arg67-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-arg68-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-arg68-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-arg69-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-arg69-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_ ERROR at setup of test_validator_invalid[_validate_linestyle-arg70-ValueError] _

request = <SubRequest 'mpl_test_settings' for <Function test_validator_invalid[_validate_linestyle-arg70-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________ ERROR at setup of test_validate_fontweight[bold-bold] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[bold-bold]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_________ ERROR at setup of test_validate_fontweight[BOLD-ValueError] __________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[BOLD-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________ ERROR at setup of test_validate_fontweight[100-100_0] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[100-100_0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________ ERROR at setup of test_validate_fontweight[100-100_1] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[100-100_1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
___________ ERROR at setup of test_validate_fontweight[weight4-100] ____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[weight4-100]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________ ERROR at setup of test_validate_fontweight[20.6-20] ______________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[20.6-20]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_________ ERROR at setup of test_validate_fontweight[20.6-ValueError] __________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[20.6-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validate_fontweight[weight7-ValueError] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontweight[weight7-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________ ERROR at setup of test_validate_fontstretch[expanded-expanded] ________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[expanded-expanded]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validate_fontstretch[EXPANDED-ValueError] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[EXPANDED-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________ ERROR at setup of test_validate_fontstretch[100-100_0] ____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[100-100_0]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
____________ ERROR at setup of test_validate_fontstretch[100-100_1] ____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[100-100_1]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
__________ ERROR at setup of test_validate_fontstretch[stretch4-100] ___________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[stretch4-100]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_____________ ERROR at setup of test_validate_fontstretch[20.6-20] _____________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[20.6-20]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_________ ERROR at setup of test_validate_fontstretch[20.6-ValueError] _________

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[20.6-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______ ERROR at setup of test_validate_fontstretch[stretch7-ValueError] _______

request = <SubRequest 'mpl_test_settings' for <Function test_validate_fontstretch[stretch7-ValueError]>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
________________________ ERROR at setup of test_keymaps ________________________

request = <SubRequest 'mpl_test_settings' for <Function test_keymaps>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______________ ERROR at setup of test_no_backend_reset_rccontext _______________

request = <SubRequest 'mpl_test_settings' for <Function test_no_backend_reset_rccontext>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______________ ERROR at setup of test_rcparams_reset_after_fail _______________

request = <SubRequest 'mpl_test_settings' for <Function test_rcparams_reset_after_fail>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
_______________ ERROR at setup of test_backend_fallback_headless _______________

request = <SubRequest 'mpl_test_settings' for <Function test_backend_fallback_headless>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
______________________ ERROR at setup of test_deprecation ______________________

request = <SubRequest 'mpl_test_settings' for <Function test_deprecation>>

    @pytest.fixture(autouse=True)
    def mpl_test_settings(request):
        from matplotlib.testing.decorators import _cleanup_cm
    
>       with _cleanup_cm():

lib/matplotlib/testing/conftest.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
lib/matplotlib/testing/decorators.py:27: in _cleanup_cm
    with warnings.catch_warnings(), matplotlib.rc_context():
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: in __enter__
    return next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

rc = None, fname = None

    @contextlib.contextmanager
    def rc_context(rc=None, fname=None):
        """
        Return a context manager for temporarily changing rcParams.
    
        Parameters
        ----------
        rc : dict
            The rcParams to temporarily set.
        fname : str or path-like
            A file with Matplotlib rc settings. If both *fname* and *rc* are given,
            settings from *rc* take precedence.
    
        See Also
        --------
        :ref:`customizing-with-matplotlibrc-files`
    
        Examples
        --------
        Passing explicit values via a dict::
    
            with mpl.rc_context({'interactive': False}):
                fig, ax = plt.subplots()
                ax.plot(range(3), range(3))
                fig.savefig('example.png')
                plt.close(fig)
    
        Loading settings from a file::
    
             with mpl.rc_context(fname='print.rc'):
                 plt.plot(x, y)  # uses 'print.rc'
    
        """
>       orig = rcParams.copy()
E       UnboundLocalError: cannot access local variable 'rcParams' where it is not associated with a value

lib/matplotlib/__init__.py:1090: UnboundLocalError
=========================== short test summary info ============================
SKIPPED [1] lib/matplotlib/tests/test_rcparams.py:534: headless
ERROR lib/matplotlib/tests/test_rcparams.py::test_rcparams - UnboundLocalErro...
ERROR lib/matplotlib/tests/test_rcparams.py::test_RcParams_class - UnboundLoc...
ERROR lib/matplotlib/tests/test_rcparams.py::test_rcparams_update - UnboundLo...
ERROR lib/matplotlib/tests/test_rcparams.py::test_rcparams_init - UnboundLoca...
ERROR lib/matplotlib/tests/test_rcparams.py::test_Bug_2543 - UnboundLocalErro...
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[same facecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[inherited facecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[different facecolor0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[same edgecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[inherited edgecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_legend_colors[different facecolor1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_mfc_rcparams - UnboundLocal...
ERROR lib/matplotlib/tests/test_rcparams.py::test_mec_rcparams - UnboundLocal...
ERROR lib/matplotlib/tests/test_rcparams.py::test_axes_titlecolor_rcparams - ...
ERROR lib/matplotlib/tests/test_rcparams.py::test_Issue_1713 - UnboundLocalEr...
ERROR lib/matplotlib/tests/test_rcparams.py::test_animation_frame_formats - U...
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-t-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-y-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-yes-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-on-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-true-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-1-True0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-1-True1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-True-True]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-f-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-n-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-no-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-off-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-false-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-0-False0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-0-False1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_bool-False-False]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist--target16]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-a,b-target17]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-aardvark-target18]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-aardvark, -target19]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-aardvark, ,-target20]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg21-target21]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg22-target22]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg23-target23]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_strlist-arg24-target24]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-1, 2-target25]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg26-target26]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg27-target27]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg28-target28]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_intlist-arg29-target29]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-1.5, 2.5-target30]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg31-target31]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg32-target32]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg33-target33]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_floatlist-arg34-target34]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler("color", "rgb")-target35]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg36-target36]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-(cycler("color", ["r", "g", "b"]) +\n                          cycler("mew", [2, 3, 5]))-target37]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler(c='rgb', lw=[1, 2, 3])-target38]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-cycler('c', 'rgb') * cycler('linestyle', ['-', '--'])-target39]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg40-target40]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_cycler-arg41-target41]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch---|---|]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch-\\oO-\\oO]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch-/+*/.x-/+*/.x]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hatch--]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-r,g,b-target46]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg47-target47]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-r, ,-target48]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg49-target49]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg50-target50]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_colorlist-arg51-target51]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-None-none]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-none-none]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-AABBCC-#AABBCC]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-AABBCC00-#AABBCC00]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-tab:blue-tab:blue]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-C12-C12]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-(0, 1, 0)-target58]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-arg59-target59]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-(0, 1, 0, 1)-target60]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_color-arg61-target61]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-linecolor-linecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-markerfacecolor-markerfacecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-mfc-markerfacecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-markeredgecolor-markeredgecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_color_or_linecolor-mec-markeredgecolor]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-auto-auto]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-fd-fd]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-10-10]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-1, 2, 3-target70]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-arg71-target71]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_hist_bins-arg72-target72]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-None-None]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-1-1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-0.1-0.1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg76-target76]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg77-target77]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg78-target78]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg79-target79]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[validate_markevery-arg80-target80]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle----]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-solid-solid]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle------]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dashed-dashed]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle--.--.]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dashdot-dashdot]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-:-:]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-dotted-dotted]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle--]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle- - ]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-None-none]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-none-none]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-DoTtEd-dotted]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-1, 3-target94]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg95-target95]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg96-target96]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg97-target97]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_valid[_validate_linestyle-arg98-target98]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-aardvark-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-2-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool--1-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_bool-arg3-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg4-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-1-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg6-MatplotlibDeprecationWarning]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_strlist-arg7-MatplotlibDeprecationWarning]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-aardvark-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-arg9-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_intlist-arg10-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-aardvark-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg12-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg13-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-arg14-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_floatlist-None-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-4-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler("bleh, [])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-Cycler("linewidth", [1, 2, 3])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j) for j in ['r', 'b']])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c', [j. __class__(j) for j in ['r', 'b']])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c', [j.\t__class__(j) for j in ['r', 'b']])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c', [j.\x0c__class__(j) for j in ['r', 'b']])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler('c', [j.__class__(j).lower() for j in ['r', 'b']])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-1 + 2-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-os.system("echo Gotcha")-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-import os-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-def badjuju(a): return a; badjuju(cycler("color", "rgb"))-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler("waka", [1, 2, 3])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(c=[1, 2, 3])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-cycler(lw=['a', 'b', 'c'])-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-arg31-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_cycler-arg32-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch---_-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch-8-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hatch-X-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_colorlist-fish-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-tab:veryblue-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-(0, 1)-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-(0, 1, 0, 1, 0)-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-(0, 1, none)-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_color-(0, 1, "0.5")-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_color_or_linecolor-line-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_color_or_linecolor-marker-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_hist_bins-aardvark-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg45-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg46-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg47-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg48-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg49-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg50-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg51-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg52-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg53-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-abc-TypeError0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg55-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg56-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg57-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg58-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-abc-TypeError1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-a-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[validate_markevery-arg61-TypeError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-aardvark-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-dotted-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-\xff\xfed\x00o\x00t\x00t\x00e\x00d\x00-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg65-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-1.23-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg67-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg68-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg69-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validator_invalid[_validate_linestyle-arg70-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[bold-bold]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[BOLD-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[100-100_0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[100-100_1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[weight4-100]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[20.6-20]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[20.6-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontweight[weight7-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[expanded-expanded]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[EXPANDED-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[100-100_0]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[100-100_1]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[stretch4-100]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[20.6-20]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[20.6-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_validate_fontstretch[stretch7-ValueError]
ERROR lib/matplotlib/tests/test_rcparams.py::test_keymaps - UnboundLocalError...
ERROR lib/matplotlib/tests/test_rcparams.py::test_no_backend_reset_rccontext
ERROR lib/matplotlib/tests/test_rcparams.py::test_rcparams_reset_after_fail
ERROR lib/matplotlib/tests/test_rcparams.py::test_backend_fallback_headless
ERROR lib/matplotlib/tests/test_rcparams.py::test_deprecation - UnboundLocalE...
======================== 1 skipped, 207 errors in 8.37s ========================
+ git checkout 3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39 lib/matplotlib/tests/test_rcparams.py
Updated 1 path from 3a8a4fa386


diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 5a4ea29..e18ffa8 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -1,9 +1,10 @@
 from __future__ import print_function, division
 
-from sympy import ask, Q
+from sympy import ask, Q, S
 from sympy.core import Basic, Add
 from sympy.core.compatibility import range
 from sympy.strategies import typed, exhaust, condition, do_one, unpack
+
 from sympy.strategies.traverse import bottom_up
 from sympy.utilities import sift
 from sympy.utilities.misc import filldedent

diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 5a4ea29..9bff9c4 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,10 +164,18 @@ class BlockMatrix(MatrixExpr):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            result = self.blocks*other.blocks
+            # convert any Zeros to ZeroMatrix
+            for i, ri in enumerate(result):
+                for j, e in enumerate(ri):
+                    if e is S.Zero:
+                        result[i, j] = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])
+            return BlockMatrix(result)
 
         return self * other
 
+
+
     def _blockadd(self, other):
         if (isinstance(other, BlockMatrix)
                 and self.structurally_equal(other)):

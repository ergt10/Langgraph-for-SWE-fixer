+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/figure.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 64619e53e9d0ed417daba287ac0d3a06943a54d5
Merge: b071f393f7 515f4418c1
Author: Elliott Sales de Andrade <quantum.analyst@gmail.com>
Date:   Thu Aug 19 03:11:01 2021 -0400

    Merge pull request #20814 from harupy/save-script-if-necessary
    
    FIX: Avoid copying source script when `plot_html_show_source_link` is False in plot directive

+ git diff 64619e53e9d0ed417daba287ac0d3a06943a54d5
diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index f1a6711cb6..32d0602709 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -1065,10 +1065,11 @@ default: %(va)s
             pass
         transform = kwargs.pop('bbox_transform', self.transSubfigure)
         # explicitly set the bbox transform if the user hasn't.
-        l = mlegend.Legend(self, handles, labels, *extra_args,
+        l = mlegend.Legend(handles, labels, *extra_args,
                            bbox_transform=transform, **kwargs)
         self.legends.append(l)
         l._remove_method = self.legends.remove
+
         self.stale = True
         return l
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (4.55.2)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (1.4.7)
Requirement already satisfied: numpy>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (1.24.4)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (24.2)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (10.4.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (2.4.7)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (2.9.0.post0)
Requirement already satisfied: setuptools_scm>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (8.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from python-dateutil>=2.7->matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (1.17.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from setuptools_scm>=4->matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (75.1.0)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from setuptools_scm>=4->matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (4.12.2)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from setuptools_scm>=4->matplotlib==3.5.0.dev1716+g64619e53e9.d20250505) (2.2.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.5.0.dev1716+g64619e53e9
    Uninstalling matplotlib-3.5.0.dev1716+g64619e53e9:
      Successfully uninstalled matplotlib-3.5.0.dev1716+g64619e53e9
  DEPRECATION: Legacy editable install of matplotlib==3.5.0.dev1716+g64619e53e9.d20250505 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for matplotlib
Successfully installed matplotlib
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 64619e53e9d0ed417daba287ac0d3a06943a54d5 lib/matplotlib/tests/test_legend.py
Updated 0 paths from 61c04b19ab
+ git apply -v -
Checking patch lib/matplotlib/tests/test_legend.py...
Applied patch lib/matplotlib/tests/test_legend.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_legend.py
============================= test session starts ==============================
platform linux -- Python 3.8.20, pytest-8.3.4, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: xdist-3.6.1, timeout-2.3.1, rerunfailures-14.0, cov-5.0.0
collected 99 items

lib/matplotlib/tests/test_legend.py ...s..s..s..s......s..s..s..s..sF... [ 36%]
........FFFF.FF.F..........F..................s...............F          [100%]

=================================== FAILURES ===================================
______________________________ test_legend_remove ______________________________

    def test_legend_remove():
        fig, ax = plt.subplots()
        lines = ax.plot(range(10))
>       leg = fig.legend(lines, "test")

lib/matplotlib/tests/test_legend.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Figure size 640x480 with 1 Axes>
args = ([<matplotlib.lines.Line2D object at 0x7f96e1729d00>], 'test')
kwargs = {}, handles = [<matplotlib.lines.Line2D object at 0x7f96e1729d00>]
labels = 'test', extra_args = ()
transform = <matplotlib.transforms.BboxTransformTo object at 0x7f96e17ca250>

    @docstring.dedent_interpd
    def legend(self, *args, **kwargs):
        """
        Place a legend on the figure.
    
        Call signatures::
    
            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)
    
        The call signatures correspond to the following different ways to use
        this method:
    
        **1. Automatic detection of elements to be shown in the legend**
    
        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.
    
        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::
    
            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()
    
        or::
    
            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()
    
        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.
    
    
        **2. Explicitly listing the artists and labels in the legend**
    
        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::
    
            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
    
        **3. Explicitly listing the artists in the legend**
    
        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::
    
            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])
    
    
        **4. Labeling existing plot elements**
    
        .. admonition:: Discouraged
    
            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.
    
        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::
    
            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])
    
    
        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.
    
        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
        Returns
        -------
        `~matplotlib.legend.Legend`
    
        Other Parameters
        ----------------
        %(_legend_kw_doc)s
    
        See Also
        --------
        .Axes.legend
    
        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        """
    
        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(
                self.axes,
                *args,
                **kwargs)
        # check for third arg
        if len(extra_args):
            # _api.warn_deprecated(
            #     "2.1",
            #     message="Figure.legend will accept no more than two "
            #     "positional arguments in the future.  Use "
            #     "'fig.legend(handles, labels, loc=location)' "
            #     "instead.")
            # kwargs['loc'] = extra_args[0]
            # extra_args = extra_args[1:]
            pass
        transform = kwargs.pop('bbox_transform', self.transSubfigure)
        # explicitly set the bbox transform if the user hasn't.
>       l = mlegend.Legend(handles, labels, *extra_args,
                           bbox_transform=transform, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'labels'

lib/matplotlib/figure.py:1068: TypeError
______________ TestLegendFigureFunction.test_legend_handle_label _______________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2fe45e0>

    def test_legend_handle_label(self):
        fig, ax = plt.subplots()
        lines = ax.plot(range(10))
        with mock.patch('matplotlib.legend.Legend') as Legend:
            fig.legend(lines, ['hello world'])
>       Legend.assert_called_with(fig, lines, ['hello world'],
                                  bbox_transform=fig.transFigure)

lib/matplotlib/tests/test_legend.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Legend' id='140286003137408'>
args = (<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e16242b0>], ['hello world'])
kwargs = {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e253ca30>}
expected = ((<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e16242b0>], ['hello world']), {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e253ca30>})
actual = call([<matplotlib.lines.Line2D object at 0x7f96e16242b0>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e253ca30>)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f96e163f8b0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: Legend(<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e16242b0>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e253ca30>)
E           Actual: Legend([<matplotlib.lines.Line2D object at 0x7f96e16242b0>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e253ca30>)

/opt/miniconda3/envs/testbed/lib/python3.8/unittest/mock.py:913: AssertionError
_________________ TestLegendFigureFunction.test_legend_no_args _________________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2fe4af0>

    def test_legend_no_args(self):
        fig, ax = plt.subplots()
        lines = ax.plot(range(10), label='hello world')
        with mock.patch('matplotlib.legend.Legend') as Legend:
            fig.legend()
>       Legend.assert_called_with(fig, lines, ['hello world'],
                                  bbox_transform=fig.transFigure)

lib/matplotlib/tests/test_legend.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Legend' id='140286018964640'>
args = (<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1667940>], ['hello world'])
kwargs = {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e17a1700>}
expected = ((<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1667940>], ['hello world']), {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e17a1700>})
actual = call([<matplotlib.lines.Line2D object at 0x7f96e1667940>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17a1700>)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f96e29920d0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: Legend(<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1667940>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17a1700>)
E           Actual: Legend([<matplotlib.lines.Line2D object at 0x7f96e1667940>], ['hello world'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17a1700>)

/opt/miniconda3/envs/testbed/lib/python3.8/unittest/mock.py:913: AssertionError
________________ TestLegendFigureFunction.test_legend_label_arg ________________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2fe4ca0>

    def test_legend_label_arg(self):
        fig, ax = plt.subplots()
        lines = ax.plot(range(10))
        with mock.patch('matplotlib.legend.Legend') as Legend:
            fig.legend(['foobar'])
>       Legend.assert_called_with(fig, lines, ['foobar'],
                                  bbox_transform=fig.transFigure)

lib/matplotlib/tests/test_legend.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Legend' id='140286005294032'>
args = (<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1833970>], ['foobar'])
kwargs = {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e17e7520>}
expected = ((<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1833970>], ['foobar']), {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e17e7520>})
actual = call([<matplotlib.lines.Line2D object at 0x7f96e1833970>], ['foobar'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17e7520>)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f96e15e6820>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: Legend(<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1833970>], ['foobar'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17e7520>)
E           Actual: Legend([<matplotlib.lines.Line2D object at 0x7f96e1833970>], ['foobar'], bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e17e7520>)

/opt/miniconda3/envs/testbed/lib/python3.8/unittest/mock.py:913: AssertionError
____________ TestLegendFigureFunction.test_legend_label_three_args _____________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2fe4f10>

    def test_legend_label_three_args(self):
        fig, ax = plt.subplots()
        lines = ax.plot(range(10))
        with mock.patch('matplotlib.legend.Legend') as Legend:
            fig.legend(lines, ['foobar'], 'right')
>       Legend.assert_called_with(fig, lines, ['foobar'], 'right',
                                  bbox_transform=fig.transFigure)

lib/matplotlib/tests/test_legend.py:352: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Legend' id='140286004108784'>
args = (<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1787190>], ['foobar'], 'right')
kwargs = {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e24b6a30>}
expected = ((<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1787190>], ['foobar'], 'right'), {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e24b6a30>})
actual = call([<matplotlib.lines.Line2D object at 0x7f96e1787190>], ['foobar'], 'right', bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e24b6a30>)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f96e17e94c0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: Legend(<Figure size 640x480 with 1 Axes>, [<matplotlib.lines.Line2D object at 0x7f96e1787190>], ['foobar'], 'right', bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e24b6a30>)
E           Actual: Legend([<matplotlib.lines.Line2D object at 0x7f96e1787190>], ['foobar'], 'right', bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e24b6a30>)

/opt/miniconda3/envs/testbed/lib/python3.8/unittest/mock.py:913: AssertionError
_________________ TestLegendFigureFunction.test_legend_kw_args _________________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2ff02b0>

    def test_legend_kw_args(self):
        fig, axs = plt.subplots(1, 2)
        lines = axs[0].plot(range(10))
        lines2 = axs[1].plot(np.arange(10) * 2.)
        with mock.patch('matplotlib.legend.Legend') as Legend:
            fig.legend(loc='right', labels=('a', 'b'), handles=(lines, lines2))
>       Legend.assert_called_with(
            fig, (lines, lines2), ('a', 'b'), loc='right',
            bbox_transform=fig.transFigure)

lib/matplotlib/tests/test_legend.py:369: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='Legend' id='140286003410016'>
args = (<Figure size 640x480 with 2 Axes>, ([<matplotlib.lines.Line2D object at 0x7f968ac81130>], [<matplotlib.lines.Line2D object at 0x7f96e1667130>]), ('a', 'b'))
kwargs = {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e2606bb0>, 'loc': 'right'}
expected = ((<Figure size 640x480 with 2 Axes>, ([<matplotlib.lines.Line2D object at 0x7f968ac81130>], [<matplotlib.lines.Line2D ...>]), ('a', 'b')), {'bbox_transform': <matplotlib.transforms.BboxTransformTo object at 0x7f96e2606bb0>, 'loc': 'right'})
actual = call(([<matplotlib.lines.Line2D object at 0x7f968ac81130>], [<matplotlib.lines.Line2D object at 0x7f96e1667130>]), ('a', 'b'), bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e2606bb0>, loc='right')
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f96e24b5790>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: Legend(<Figure size 640x480 with 2 Axes>, ([<matplotlib.lines.Line2D object at 0x7f968ac81130>], [<matplotlib.lines.Line2D object at 0x7f96e1667130>]), ('a', 'b'), loc='right', bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e2606bb0>)
E           Actual: Legend(([<matplotlib.lines.Line2D object at 0x7f968ac81130>], [<matplotlib.lines.Line2D object at 0x7f96e1667130>]), ('a', 'b'), bbox_transform=<matplotlib.transforms.BboxTransformTo object at 0x7f96e2606bb0>, loc='right')

/opt/miniconda3/envs/testbed/lib/python3.8/unittest/mock.py:913: AssertionError
________________ TestLegendFigureFunction.test_warn_args_kwargs ________________

self = <matplotlib.tests.test_legend.TestLegendFigureFunction object at 0x7f96e2ff04c0>

    def test_warn_args_kwargs(self):
        fig, axs = plt.subplots(1, 2)
        lines = axs[0].plot(range(10))
        lines2 = axs[1].plot(np.arange(10) * 2.)
        with pytest.warns(UserWarning) as record:
>           fig.legend((lines, lines2), labels=('a', 'b'))

lib/matplotlib/tests/test_legend.py:378: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Figure size 640x480 with 2 Axes>
args = (([<matplotlib.lines.Line2D object at 0x7f96e1560070>], [<matplotlib.lines.Line2D object at 0x7f96e1560640>]),)
kwargs = {}
handles = [<matplotlib.lines.Line2D object at 0x7f96e1560070>, <matplotlib.lines.Line2D object at 0x7f96e1560640>]
labels = ('a', 'b'), extra_args = ()
transform = <matplotlib.transforms.BboxTransformTo object at 0x7f96e251c0d0>

    @docstring.dedent_interpd
    def legend(self, *args, **kwargs):
        """
        Place a legend on the figure.
    
        Call signatures::
    
            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)
    
        The call signatures correspond to the following different ways to use
        this method:
    
        **1. Automatic detection of elements to be shown in the legend**
    
        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.
    
        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::
    
            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()
    
        or::
    
            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()
    
        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.
    
    
        **2. Explicitly listing the artists and labels in the legend**
    
        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::
    
            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
    
        **3. Explicitly listing the artists in the legend**
    
        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::
    
            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])
    
    
        **4. Labeling existing plot elements**
    
        .. admonition:: Discouraged
    
            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.
    
        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::
    
            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])
    
    
        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.
    
        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
        Returns
        -------
        `~matplotlib.legend.Legend`
    
        Other Parameters
        ----------------
        %(_legend_kw_doc)s
    
        See Also
        --------
        .Axes.legend
    
        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        """
    
        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(
                self.axes,
                *args,
                **kwargs)
        # check for third arg
        if len(extra_args):
            # _api.warn_deprecated(
            #     "2.1",
            #     message="Figure.legend will accept no more than two "
            #     "positional arguments in the future.  Use "
            #     "'fig.legend(handles, labels, loc=location)' "
            #     "instead.")
            # kwargs['loc'] = extra_args[0]
            # extra_args = extra_args[1:]
            pass
        transform = kwargs.pop('bbox_transform', self.transSubfigure)
        # explicitly set the bbox transform if the user hasn't.
>       l = mlegend.Legend(handles, labels, *extra_args,
                           bbox_transform=transform, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'labels'

lib/matplotlib/figure.py:1068: TypeError
________________________ test_cross_figure_patch_legend ________________________

    def test_cross_figure_patch_legend():
        fig, ax = plt.subplots()
        fig2, ax2 = plt.subplots()
    
        brs = ax.bar(range(3), range(3))
>       fig2.legend(brs, 'foo')

lib/matplotlib/tests/test_legend.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Figure size 640x480 with 1 Axes>
args = (<BarContainer object of 3 artists>, 'foo'), kwargs = {}
handles = <BarContainer object of 3 artists>, labels = 'foo', extra_args = ()
transform = <matplotlib.transforms.BboxTransformTo object at 0x7f96e153ab80>

    @docstring.dedent_interpd
    def legend(self, *args, **kwargs):
        """
        Place a legend on the figure.
    
        Call signatures::
    
            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)
    
        The call signatures correspond to the following different ways to use
        this method:
    
        **1. Automatic detection of elements to be shown in the legend**
    
        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.
    
        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::
    
            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()
    
        or::
    
            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()
    
        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.
    
    
        **2. Explicitly listing the artists and labels in the legend**
    
        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::
    
            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
    
        **3. Explicitly listing the artists in the legend**
    
        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::
    
            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])
    
    
        **4. Labeling existing plot elements**
    
        .. admonition:: Discouraged
    
            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.
    
        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::
    
            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])
    
    
        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.
    
        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
        Returns
        -------
        `~matplotlib.legend.Legend`
    
        Other Parameters
        ----------------
        %(_legend_kw_doc)s
    
        See Also
        --------
        .Axes.legend
    
        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        """
    
        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(
                self.axes,
                *args,
                **kwargs)
        # check for third arg
        if len(extra_args):
            # _api.warn_deprecated(
            #     "2.1",
            #     message="Figure.legend will accept no more than two "
            #     "positional arguments in the future.  Use "
            #     "'fig.legend(handles, labels, loc=location)' "
            #     "instead.")
            # kwargs['loc'] = extra_args[0]
            # extra_args = extra_args[1:]
            pass
        transform = kwargs.pop('bbox_transform', self.transSubfigure)
        # explicitly set the bbox transform if the user hasn't.
>       l = mlegend.Legend(handles, labels, *extra_args,
                           bbox_transform=transform, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'labels'

lib/matplotlib/figure.py:1068: TypeError
______________________ test_window_extent_cached_renderer ______________________

    def test_window_extent_cached_renderer():
        fig, ax = plt.subplots(dpi=100)
        ax.plot(range(10), label='Aardvark')
        leg = ax.legend()
>       leg2 = fig.legend()

lib/matplotlib/tests/test_legend.py:542: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Figure size 800x600 with 1 Axes>, args = (), kwargs = {}
handles = [<matplotlib.lines.Line2D object at 0x7f96e18330d0>]
labels = ['Aardvark'], extra_args = ()
transform = <matplotlib.transforms.BboxTransformTo object at 0x7f96e1699910>

    @docstring.dedent_interpd
    def legend(self, *args, **kwargs):
        """
        Place a legend on the figure.
    
        Call signatures::
    
            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)
    
        The call signatures correspond to the following different ways to use
        this method:
    
        **1. Automatic detection of elements to be shown in the legend**
    
        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.
    
        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::
    
            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()
    
        or::
    
            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()
    
        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.
    
    
        **2. Explicitly listing the artists and labels in the legend**
    
        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::
    
            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
    
        **3. Explicitly listing the artists in the legend**
    
        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::
    
            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])
    
    
        **4. Labeling existing plot elements**
    
        .. admonition:: Discouraged
    
            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.
    
        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::
    
            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])
    
    
        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.
    
        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
        Returns
        -------
        `~matplotlib.legend.Legend`
    
        Other Parameters
        ----------------
        %(_legend_kw_doc)s
    
        See Also
        --------
        .Axes.legend
    
        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        """
    
        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(
                self.axes,
                *args,
                **kwargs)
        # check for third arg
        if len(extra_args):
            # _api.warn_deprecated(
            #     "2.1",
            #     message="Figure.legend will accept no more than two "
            #     "positional arguments in the future.  Use "
            #     "'fig.legend(handles, labels, loc=location)' "
            #     "instead.")
            # kwargs['loc'] = extra_args[0]
            # extra_args = extra_args[1:]
            pass
        transform = kwargs.pop('bbox_transform', self.transSubfigure)
        # explicitly set the bbox transform if the user hasn't.
>       l = mlegend.Legend(handles, labels, *extra_args,
                           bbox_transform=transform, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'labels'

lib/matplotlib/figure.py:1068: TypeError
____________________________ test_subfigure_legend _____________________________

    def test_subfigure_legend():
        # Test that legend can be added to subfigure (#20723)
        subfig = plt.figure().subfigures()
        ax = subfig.subplots()
        ax.plot([0, 1], [0, 1], label="line")
>       leg = subfig.legend()

lib/matplotlib/tests/test_legend.py:881: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <matplotlib.figure.SubFigure object at 0x7f96e1560040>, args = ()
kwargs = {}, handles = [<matplotlib.lines.Line2D object at 0x7f96e26061f0>]
labels = ['line'], extra_args = ()
transform = <matplotlib.transforms.BboxTransformTo object at 0x7f96e2a37730>

    @docstring.dedent_interpd
    def legend(self, *args, **kwargs):
        """
        Place a legend on the figure.
    
        Call signatures::
    
            legend()
            legend(handles, labels)
            legend(handles=handles)
            legend(labels)
    
        The call signatures correspond to the following different ways to use
        this method:
    
        **1. Automatic detection of elements to be shown in the legend**
    
        The elements to be added to the legend are automatically determined,
        when you do not pass in any extra arguments.
    
        In this case, the labels are taken from the artist. You can specify
        them either at artist creation or by calling the
        :meth:`~.Artist.set_label` method on the artist::
    
            ax.plot([1, 2, 3], label='Inline label')
            fig.legend()
    
        or::
    
            line, = ax.plot([1, 2, 3])
            line.set_label('Label via method')
            fig.legend()
    
        Specific lines can be excluded from the automatic legend element
        selection by defining a label starting with an underscore.
        This is default for all artists, so calling `.Figure.legend` without
        any arguments and without setting the labels manually will result in
        no legend being drawn.
    
    
        **2. Explicitly listing the artists and labels in the legend**
    
        For full control of which artists have a legend entry, it is possible
        to pass an iterable of legend artists followed by an iterable of
        legend labels respectively::
    
            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])
    
    
        **3. Explicitly listing the artists in the legend**
    
        This is similar to 2, but the labels are taken from the artists'
        label properties. Example::
    
            line1, = ax1.plot([1, 2, 3], label='label1')
            line2, = ax2.plot([1, 2, 3], label='label2')
            fig.legend(handles=[line1, line2])
    
    
        **4. Labeling existing plot elements**
    
        .. admonition:: Discouraged
    
            This call signature is discouraged, because the relation between
            plot elements and labels is only implicit by their order and can
            easily be mixed up.
    
        To make a legend for all artists on all Axes, call this function with
        an iterable of strings, one for each legend item. For example::
    
            fig, (ax1, ax2)  = plt.subplots(1, 2)
            ax1.plot([1, 3, 5], color='blue')
            ax2.plot([2, 4, 6], color='red')
            fig.legend(['the blues', 'the reds'])
    
    
        Parameters
        ----------
        handles : list of `.Artist`, optional
            A list of Artists (lines, patches) to be added to the legend.
            Use this together with *labels*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
            The length of handles and labels should be the same in this
            case. If they are not, they are truncated to the smaller length.
    
        labels : list of str, optional
            A list of labels to show next to the artists.
            Use this together with *handles*, if you need full control on what
            is shown in the legend and the automatic mechanism described above
            is not sufficient.
    
        Returns
        -------
        `~matplotlib.legend.Legend`
    
        Other Parameters
        ----------------
        %(_legend_kw_doc)s
    
        See Also
        --------
        .Axes.legend
    
        Notes
        -----
        Some artists are not supported by this function.  See
        :doc:`/tutorials/intermediate/legend_guide` for details.
        """
    
        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(
                self.axes,
                *args,
                **kwargs)
        # check for third arg
        if len(extra_args):
            # _api.warn_deprecated(
            #     "2.1",
            #     message="Figure.legend will accept no more than two "
            #     "positional arguments in the future.  Use "
            #     "'fig.legend(handles, labels, loc=location)' "
            #     "instead.")
            # kwargs['loc'] = extra_args[0]
            # extra_args = extra_args[1:]
            pass
        transform = kwargs.pop('bbox_transform', self.transSubfigure)
        # explicitly set the bbox transform if the user hasn't.
>       l = mlegend.Legend(handles, labels, *extra_args,
                           bbox_transform=transform, **kwargs)
E       TypeError: __init__() missing 1 required positional argument: 'labels'

lib/matplotlib/figure.py:1068: TypeError
==================================== PASSES ====================================
___________________________ test_legend_title_empty ____________________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
_____________________ test_legend_title_fontprop_fontsize ______________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
____________________________ test_get_set_draggable ____________________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.legend:legend.py:1225 No handles with labels found to put in legend.
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_legend.py::test_legend_ordereddict
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_various_labels[png]
PASSED lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_labels_first[png]
PASSED lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]
PASSED lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]
PASSED lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]
PASSED lib/matplotlib/tests/test_legend.py::test_fancy[png]
PASSED lib/matplotlib/tests/test_legend.py::test_fancy[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_framealpha[png]
PASSED lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_rc[png]
PASSED lib/matplotlib/tests/test_legend.py::test_rc[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_expand[png]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]
PASSED lib/matplotlib/tests/test_legend.py::test_hatching[png]
PASSED lib/matplotlib/tests/test_legend.py::test_hatching[pdf]
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite
PASSED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw
PASSED lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]
PASSED lib/matplotlib/tests/test_legend.py::test_nanscatter
PASSED lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok
PASSED lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]
PASSED lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]
PASSED lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes
PASSED lib/matplotlib/tests/test_legend.py::test_handler_numpoints
PASSED lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend
PASSED lib/matplotlib/tests/test_legend.py::test_shadow_framealpha
PASSED lib/matplotlib/tests/test_legend.py::test_legend_title_empty
PASSED lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent
PASSED lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short
PASSED lib/matplotlib/tests/test_legend.py::test_get_set_draggable
PASSED lib/matplotlib/tests/test_legend.py::test_alpha_handles
PASSED lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc
PASSED lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]
PASSED lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception
PASSED lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor
PASSED lib/matplotlib/tests/test_legend.py::test_legend_text_axes
PASSED lib/matplotlib/tests/test_legend.py::test_handlerline2d
SKIPPED [9] ../opt/miniconda3/envs/testbed/lib/python3.8/contextlib.py:75: Cannot compare svg files on this system
SKIPPED [1] lib/matplotlib/tests/test_legend.py:745: This test needs a TeX installation
FAILED lib/matplotlib/tests/test_legend.py::test_legend_remove - TypeError: _...
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args
FAILED lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs
FAILED lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend - ...
FAILED lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer
FAILED lib/matplotlib/tests/test_legend.py::test_subfigure_legend - TypeError...
================== 10 failed, 79 passed, 10 skipped in 14.86s ==================
+ git checkout 64619e53e9d0ed417daba287ac0d3a06943a54d5 lib/matplotlib/tests/test_legend.py
Updated 1 path from 61c04b19ab

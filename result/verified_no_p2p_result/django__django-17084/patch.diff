
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index eb1b257..5d366d3 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -38,16 +38,17 @@ class WhereNode(tree.Node):
 
     def split_having_qualify(self, negated=False, must_group_by=False):
         """
-        Return three possibly None nodes: one for those parts of self that
-        should be included in the WHERE clause, one for those parts of self
-        that must be included in the HAVING clause, and one for those parts
-        that refer to window functions.
+        Return three possibly None nodes: one for those parts of self that must
+        be included in the WHERE clause, one for those parts of self that must
+        be included in the HAVING clause, and one for those parts that refer to
+        window functions.
         """
         if not self.contains_aggregate and not self.contains_over_clause:
-            return self, None, None
+            return None, None, None
         in_negated = negated ^ self.negated
         # Whether or not children must be connected in the same filtering
         # clause (WHERE > HAVING > QUALIFY) to maintain logical semantic.
+
         must_remain_connected = (
             (in_negated and self.connector == AND)
             or (not in_negated and self.connector == OR)

diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index eb1b257..9cb2f4c 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -53,17 +53,10 @@ class WhereNode(tree.Node):
             or (not in_negated and self.connector == OR)
             or self.connector == XOR
         )
-        if (
-            must_remain_connected
-            and self.contains_aggregate
-            and not self.contains_over_clause
-        ):
-            # It's must cheaper to short-circuit and stash everything in the
-            # HAVING clause than split children if possible.
-            return None, self, None
         where_parts = []
         having_parts = []
         qualify_parts = []
+
         for c in self.children:
             if hasattr(c, "split_having_qualify"):
                 where_part, having_part, qualify_part = c.split_having_qualify(

diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index eb1b257..93f0fd0 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -85,10 +85,11 @@ class WhereNode(tree.Node):
             # Disjunctive heterogeneous predicates can be pushed down to
             # qualify as long as no conditional aggregation is involved.
             if not where_parts or (where_parts and not must_group_by):
-                return None, None, self
+                return None, None, None
             elif where_parts:
                 # In theory this should only be enforced when dealing with
                 # where_parts containing predicates against multi-valued
+
                 # relationships that could affect aggregation results but this
                 # is complex to infer properly.
                 raise NotImplementedError(

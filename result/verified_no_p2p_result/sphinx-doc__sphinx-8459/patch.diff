
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 6605f2b..dd409ce 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1204,10 +1204,11 @@ class DocstringSignatureMixin:
             result = self._find_signature()
             if result is not None:
                 self.args, self.retann = result
-        sig = super().format_signature(**kwargs)  # type: ignore
+        sig = super().format_signature(type_aliases=self.config.autodoc_type_aliases, **kwargs)  # type: ignore
         if self._signatures:
             return "\n".join([sig] + self._signatures)
         else:
+
             return sig
 
 

diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 6605f2b..dd01c4e 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1512,10 +1512,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
         if self.doc_as_attr:
             return ''
 
-        sig = super().format_signature()
+        sig = super().format_signature(type_aliases=self.config.autodoc_type_aliases)
         sigs = []
 
         overloads = self.get_overloaded_signatures()
+
         if overloads and self.config.autodoc_typehints == 'signature':
             # Use signatures for overloaded methods instead of the implementation method.
             method = safe_getattr(self._signature_class, self._signature_method_name, None)

diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 6605f2b..9684f26 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1937,10 +1937,11 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
             overloaded = True
         else:
             overloaded = False
-            sig = super().format_signature(**kwargs)
+            sig = super().format_signature(type_aliases=self.config.autodoc_type_aliases, **kwargs)
             sigs.append(sig)
 
         meth = self.parent.__dict__.get(self.objpath[-1])
+
         if inspect.is_singledispatch_method(meth):
             # append signature of singledispatch'ed functions
             for typ, func in meth.dispatcher.registry.items():

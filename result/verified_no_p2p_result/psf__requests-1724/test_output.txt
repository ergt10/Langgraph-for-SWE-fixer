+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   requests/sessions.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 1ba83c47ce7b177efe90d5f51f7760680f72eda0
Merge: 9ffcbb82 edf7e5f4
Author: Ian Cordasco <graffatcolmingov@gmail.com>
Date:   Sun Nov 3 18:16:21 2013 -0800

    Merge pull request #1722 from schinckel/patch-1
    
    Fix documentation typo.

+ git diff 1ba83c47ce7b177efe90d5f51f7760680f72eda0
diff --git a/requests/sessions.py b/requests/sessions.py
index cc72f65d..05793c1f 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -254,10 +254,11 @@ class Session(SessionRedirectMixin):
 
         p = PreparedRequest()
         p.prepare(
-            method=request.method.upper(),
+            method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
             url=request.url,
             files=request.files,
             data=request.data,
+
             headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
             params=merge_setting(request.params, self.params),
             auth=merge_setting(auth, self.auth),
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install .
Processing /testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Building wheels for collected packages: requests
  Building wheel for requests (setup.py): started
  Building wheel for requests (setup.py): finished with status 'done'
  Created wheel for requests: filename=requests-2.0.1-py3-none-any.whl size=433900 sha256=9d37fa9ece8d5ff51ec0ebb48382cdc59d91669aadd41ccc177a5b1a2cddbc2c
  Stored in directory: /tmp/pip-ephem-wheel-cache-09csi726/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built requests
Installing collected packages: requests
  Attempting uninstall: requests
    Found existing installation: requests 2.0.1
    Uninstalling requests-2.0.1:
      Successfully uninstalled requests-2.0.1
Successfully installed requests-2.0.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 1ba83c47ce7b177efe90d5f51f7760680f72eda0 test_requests.py
Updated 0 paths from c8e845ad
+ git apply -v -
<stdin>:8: trailing whitespace.
    
Checking patch test_requests.py...
Applied patch test_requests.py cleanly.
warning: 1 line adds whitespace errors.
+ pytest -rA test_requests.py
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-7.4.4, pluggy-1.0.0
rootdir: /testbed
collected 88 items

test_requests.py FFFFFF.FFFFFFF..F..F.FFFFFFF.FF..F..F.....F.F.FFF..FFF. [ 62%]
FFFF.FFF.........................                                        [100%]

=================================== FAILURES ===================================
____________ RequestsTestCase.test_BASICAUTH_TUPLE_HTTP_200_OK_GET _____________

self = <test_requests.RequestsTestCase testMethod=test_BASICAUTH_TUPLE_HTTP_200_OK_GET>

    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):
        auth = ('user', 'pass')
        url = httpbin('basic-auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcf34cd0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_____________ RequestsTestCase.test_DIGESTAUTH_WRONG_HTTP_401_GET ______________

self = <test_requests.RequestsTestCase testMethod=test_DIGESTAUTH_WRONG_HTTP_401_GET>

    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):
    
        auth = HTTPDigestAuth('user', 'wrongpass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedd01e3a0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_______________ RequestsTestCase.test_DIGEST_AUTH_RETURNS_COOKIE _______________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_AUTH_RETURNS_COOKIE>

    def test_DIGEST_AUTH_RETURNS_COOKIE(self):
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
        auth = HTTPDigestAuth('user', 'pass')
>       r = requests.get(url)

test_requests.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcdc8850>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________ RequestsTestCase.test_DIGEST_AUTH_SETS_SESSION_COOKIES ____________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_AUTH_SETS_SESSION_COOKIES>

    def test_DIGEST_AUTH_SETS_SESSION_COOKIES(self):
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
        auth = HTTPDigestAuth('user', 'pass')
        s = requests.Session()
>       s.get(url, auth=auth)

test_requests.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc716c40>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________________ RequestsTestCase.test_DIGEST_HTTP_200_OK_GET _________________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_HTTP_200_OK_GET>

    def test_DIGEST_HTTP_200_OK_GET(self):
    
        auth = HTTPDigestAuth('user', 'pass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth)

test_requests.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6ede20>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_____________________ RequestsTestCase.test_DIGEST_STREAM ______________________

self = <test_requests.RequestsTestCase testMethod=test_DIGEST_STREAM>

    def test_DIGEST_STREAM(self):
    
        auth = HTTPDigestAuth('user', 'pass')
        url = httpbin('digest-auth', 'auth', 'user', 'pass')
    
>       r = requests.get(url, auth=auth, stream=True)

test_requests.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6bc8e0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
___________ RequestsTestCase.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS ____________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_GET_WITH_MIXED_PARAMS>

    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):
        heads = {'User-agent': 'Mozilla/5.0'}
    
>       r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)

test_requests.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6edbb0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
______________ RequestsTestCase.test_HTTP_200_OK_GET_WITH_PARAMS _______________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_GET_WITH_PARAMS>

    def test_HTTP_200_OK_GET_WITH_PARAMS(self):
        heads = {'User-agent': 'Mozilla/5.0'}
    
>       r = requests.get(httpbin('user-agent'), headers=heads)

test_requests.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedd012f40>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________________ RequestsTestCase.test_HTTP_200_OK_HEAD ____________________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_HEAD>

    def test_HTTP_200_OK_HEAD(self):
>       r = requests.head(httpbin('get'))

test_requests.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:77: in head
    return request('head', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc72a250>
request = <Request [HEAD]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________________ RequestsTestCase.test_HTTP_200_OK_PUT _____________________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_200_OK_PUT>

    def test_HTTP_200_OK_PUT(self):
>       r = requests.put(httpbin('put'))

test_requests.py:218: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:99: in put
    return request('put', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc7159a0>
request = <Request [PUT]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
______________ RequestsTestCase.test_HTTP_302_ALLOW_REDIRECT_GET _______________

self = <test_requests.RequestsTestCase testMethod=test_HTTP_302_ALLOW_REDIRECT_GET>

    def test_HTTP_302_ALLOW_REDIRECT_GET(self):
>       r = requests.get(httpbin('redirect', '1'))

test_requests.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedceae310>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________________ RequestsTestCase.test_POSTBIN_GET_POST_FILES _________________

self = <test_requests.RequestsTestCase testMethod=test_POSTBIN_GET_POST_FILES>

    def test_POSTBIN_GET_POST_FILES(self):
    
        url = httpbin('post')
>       post1 = requests.post(url).raise_for_status()

test_requests.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc7234c0>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________ RequestsTestCase.test_POSTBIN_GET_POST_FILES_WITH_DATA ____________

self = <test_requests.RequestsTestCase testMethod=test_POSTBIN_GET_POST_FILES_WITH_DATA>

    def test_POSTBIN_GET_POST_FILES_WITH_DATA(self):
    
        url = httpbin('post')
>       post1 = requests.post(url).raise_for_status()

test_requests.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedce945b0>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_basicauth_with_netrc __________________

self = <test_requests.RequestsTestCase testMethod=test_basicauth_with_netrc>

    def test_basicauth_with_netrc(self):
        auth = ('user', 'pass')
        wrong_auth = ('wronguser', 'wrongpass')
        url = httpbin('basic-auth', 'user', 'pass')
    
        def get_netrc_auth_mock(url):
            return auth
        requests.sessions.get_netrc_auth = get_netrc_auth_mock
    
        # Should use netrc and work.
>       r = requests.get(url)

test_requests.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc70d9d0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
________________ RequestsTestCase.test_conflicting_post_params _________________

self = <test_requests.RequestsTestCase testMethod=test_conflicting_post_params>

    def test_conflicting_post_params(self):
        url = httpbin('post')
        with open('requirements.txt') as f:
>           pytest.raises(ValueError, "requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})")
E           TypeError: 'requests.post(url, data=\'[{"some": "data"}]\', files={\'some\': f})' object (type: <class 'str'>) must be callable

test_requests.py:362: TypeError
________________ RequestsTestCase.test_cookie_persists_via_api _________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_persists_via_api>

    def test_cookie_persists_via_api(self):
        s = requests.session()
>       r = s.get(httpbin('redirect/1'), cookies={'foo':'bar'})

test_requests.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc72a400>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_cookie_quote_wrapped __________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_quote_wrapped>

    def test_cookie_quote_wrapped(self):
        s = requests.session()
>       s.get(httpbin('cookies/set?foo="bar:baz"'))

test_requests.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedd02c730>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
________________ RequestsTestCase.test_cookie_removed_on_expire ________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_removed_on_expire>

    def test_cookie_removed_on_expire(self):
        s = requests.session()
>       s.get(httpbin('cookies/set?foo=bar'))

test_requests.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6c9430>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
________________ RequestsTestCase.test_cookie_sent_on_redirect _________________

self = <test_requests.RequestsTestCase testMethod=test_cookie_sent_on_redirect>

    def test_cookie_sent_on_redirect(self):
        s = requests.session()
>       s.get(httpbin('cookies/set?foo=bar'))

test_requests.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcff9400>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_custom_content_type ___________________

self = <test_requests.RequestsTestCase testMethod=test_custom_content_type>

    def test_custom_content_type(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': json.dumps({'a': 123})},
                          files={'file1': ('test_requests.py', open(__file__, 'rb')),
                                 'file2': ('test_requests', open(__file__, 'rb'),
                                           'text/py-content-type')})

test_requests.py:443: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc727370>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________________ RequestsTestCase.test_decompress_gzip _____________________

self = <test_requests.RequestsTestCase testMethod=test_decompress_gzip>

    def test_decompress_gzip(self):
>       r = requests.get(httpbin('gzip'))

test_requests.py:378: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedce95340>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________ RequestsTestCase.test_different_encodings_dont_break_post ___________

self = <test_requests.RequestsTestCase testMethod=test_different_encodings_dont_break_post>

    def test_different_encodings_dont_break_post(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': json.dumps({'a': 123})},
                          params={'blah': 'asdf1234'},
                          files={'file': ('test_requests.py', open(__file__, 'rb'))})

test_requests.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc709610>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_______________________ RequestsTestCase.test_fixes_1329 _______________________

self = <test_requests.RequestsTestCase testMethod=test_fixes_1329>

    def test_fixes_1329(self):
        """
        Ensure that header updates are done case-insensitively.
        """
        s = requests.Session()
        s.headers.update({'ACCEPT': 'BOGUS'})
        s.headers.update({'accept': 'application/json'})
>       r = s.get(httpbin('get'))

test_requests.py:586: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedce88670>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
________________ RequestsTestCase.test_generic_cookiejar_works _________________

self = <test_requests.RequestsTestCase testMethod=test_generic_cookiejar_works>

    def test_generic_cookiejar_works(self):
        cj = cookielib.CookieJar()
        cookiejar_from_dict({'foo': 'bar'}, cj)
        s = requests.session()
        s.cookies = cj
>       r = s.get(httpbin('cookies'))

test_requests.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc70c160>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
___________ RequestsTestCase.test_header_remove_is_case_insensitive ____________

self = <test_requests.RequestsTestCase testMethod=test_header_remove_is_case_insensitive>

    def test_header_remove_is_case_insensitive(self):
        # From issue #1321
        s = requests.Session()
        s.headers['foo'] = 'bar'
>       r = s.get(httpbin('get'), headers={'FOO': None})

test_requests.py:641: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedceb3df0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
______________________ RequestsTestCase.test_invalid_url _______________________

self = <test_requests.RequestsTestCase testMethod=test_invalid_url>

    def test_invalid_url(self):
        with pytest.raises(MissingSchema):
>           requests.get('hiwpefhipowhefopw')

test_requests.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcff2af0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
____________ RequestsTestCase.test_params_are_merged_case_sensitive ____________

self = <test_requests.RequestsTestCase testMethod=test_params_are_merged_case_sensitive>

    def test_params_are_merged_case_sensitive(self):
        s = requests.Session()
        s.params['foo'] = 'bar'
>       r = s.get(httpbin('get'), params={'FOO': 'bar'})

test_requests.py:647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6bcfa0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________________ RequestsTestCase.test_prepared_from_session __________________

self = <test_requests.RequestsTestCase testMethod=test_prepared_from_session>

    def test_prepared_from_session(self):
        class DummyAuth(requests.auth.AuthBase):
            def __call__(self, r):
                r.headers['Dummy-Auth-Test'] = 'dummy-auth-test-ok'
                return r
    
        req = requests.Request('GET', httpbin('headers'))
        assert not req.auth
    
        s = requests.Session()
        s.auth = DummyAuth()
    
>       prep = s.prepare_request(req)

test_requests.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedd012520>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
________ RequestsTestCase.test_request_cookie_overrides_session_cookie _________

self = <test_requests.RequestsTestCase testMethod=test_request_cookie_overrides_session_cookie>

    def test_request_cookie_overrides_session_cookie(self):
        s = requests.session()
        s.cookies['foo'] = 'bar'
>       r = s.get(httpbin('cookies'), cookies={'foo': 'baz'})

test_requests.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6d8a30>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_____________________ RequestsTestCase.test_request_ok_set _____________________

self = <test_requests.RequestsTestCase testMethod=test_request_ok_set>

    def test_request_ok_set(self):
>       r = requests.get(httpbin('status', '404'))

test_requests.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc70ca90>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________ RequestsTestCase.test_requests_in_history_are_not_overridden _________

self = <test_requests.RequestsTestCase testMethod=test_requests_in_history_are_not_overridden>

    def test_requests_in_history_are_not_overridden(self):
>       resp = requests.get(httpbin('redirect/3'))

test_requests.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcf79c10>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
___________________ RequestsTestCase.test_set_cookie_on_301 ____________________

self = <test_requests.RequestsTestCase testMethod=test_set_cookie_on_301>

    def test_set_cookie_on_301(self):
        s = requests.session()
        url = httpbin('cookies/set?foo=bar')
>       r = s.get(url)

test_requests.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/sessions.py:374: in get
    return self.request('GET', url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc709fd0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_____________________ RequestsTestCase.test_status_raising _____________________

self = <test_requests.RequestsTestCase testMethod=test_status_raising>

    def test_status_raising(self):
>       r = requests.get(httpbin('status', '404'))

test_requests.py:370: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedd02cdc0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
___________________ RequestsTestCase.test_time_elapsed_blank ___________________

self = <test_requests.RequestsTestCase testMethod=test_time_elapsed_blank>

    def test_time_elapsed_blank(self):
>       r = requests.get(httpbin('get'))

test_requests.py:532: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc639400>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
______________________ RequestsTestCase.test_unicode_get _______________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_get>

    def test_unicode_get(self):
        url = httpbin('/get')
>       requests.get(url, params={'foo': 'føø'})

test_requests.py:383: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc6ec6d0>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_unicode_header_name ___________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_header_name>

    def test_unicode_header_name(self):
>       requests.put(httpbin('put'), headers={str('Content-Type'): 'application/octet-stream'}, data='\xff') # compat.str is unicode.

test_requests.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:99: in put
    return request('put', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc639580>
request = <Request [PUT]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_unicode_method_name ___________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_method_name>

    def test_unicode_method_name(self):
        files = {'file': open('test_requests.py', 'rb')}
>       r = requests.request(method=u'POST', url=httpbin('post'), files=files)

test_requests.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc7099d0>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________________ RequestsTestCase.test_unicode_multipart_post _________________

self = <test_requests.RequestsTestCase testMethod=test_unicode_multipart_post>

    def test_unicode_multipart_post(self):
>       r = requests.post(httpbin('post'),
                          data={'stuff': u'ëlïxr'},
                          files={'file': ('test_requests.py', open(__file__, 'rb'))})

test_requests.py:406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:88: in post
    return request('post', url, data=data, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedce93340>
request = <Request [POST]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_______________ RequestsTestCase.test_uppercase_scheme_redirect ________________

self = <test_requests.RequestsTestCase testMethod=test_uppercase_scheme_redirect>

    def test_uppercase_scheme_redirect(self):
        parts = urlparse(httpbin('html'))
        url = "HTTP://" + parts.netloc + parts.path
>       r = requests.get(httpbin('redirect-to'), params={'url': url})

test_requests.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedcff5790>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
_________ RequestsTestCase.test_urlencoded_get_query_multivalued_param _________

self = <test_requests.RequestsTestCase testMethod=test_urlencoded_get_query_multivalued_param>

    def test_urlencoded_get_query_multivalued_param(self):
    
>       r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))

test_requests.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedceb0a90>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
__________________ RequestsTestCase.test_user_agent_transfers __________________

self = <test_requests.RequestsTestCase testMethod=test_user_agent_transfers>

    def test_user_agent_transfers(self):
    
        heads = {
            'User-agent': 'Mozilla/5.0 (github.com/kennethreitz/requests)'
        }
    
>       r = requests.get(httpbin('user-agent'), headers=heads)

test_requests.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
requests/api.py:55: in get
    return request('get', url, **kwargs)
requests/api.py:44: in request
    return session.request(method=method, url=url, **kwargs)
requests/sessions.py:325: in request
    prep = self.prepare_request(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.sessions.Session object at 0x7fdedc70d760>
request = <Request [GET]>

    def prepare_request(self, request):
        """Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.
    
        :param request: :class:`Request` instance to prepare with this
        session's settings.
        """
        cookies = request.cookies or {}
    
        # Bootstrap CookieJar.
        if not isinstance(cookies, cookielib.CookieJar):
            cookies = cookiejar_from_dict(cookies)
    
        # Merge with session cookies
        merged_cookies = RequestsCookieJar()
        merged_cookies.update(self.cookies)
        merged_cookies.update(cookies)
    
    
        # Set environment's basic authentication if not explicitly set.
        auth = request.auth
        if self.trust_env and not auth and not self.auth:
            auth = get_netrc_auth(request.url)
    
        p = PreparedRequest()
        p.prepare(
>           method=request.method.upper() if not isinstance(request.method, unicode) else request.method.encode('ascii', 'strict').upper(),
            url=request.url,
            files=request.files,
            data=request.data,
    
            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),
            params=merge_setting(request.params, self.params),
            auth=merge_setting(auth, self.auth),
            cookies=merged_cookies,
            hooks=merge_setting(request.hooks, self.hooks),
        )
E       NameError: name 'unicode' is not defined

requests/sessions.py:257: NameError
=============================== warnings summary ===============================
requests/packages/urllib3/_collections.py:7
  /testbed/requests/packages/urllib3/_collections.py:7: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    from collections import MutableMapping

requests/sessions.py:12
  /testbed/requests/sessions.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    from collections import Mapping

test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE
  /testbed/requests/models.py:156: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
    if isinstance(hook, collections.Callable):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_ALTERNATIVE
PASSED test_requests.py::RequestsTestCase::test_autoset_header_values_are_native
PASSED test_requests.py::RequestsTestCase::test_basic_building
PASSED test_requests.py::RequestsTestCase::test_can_send_nonstring_objects_with_files
PASSED test_requests.py::RequestsTestCase::test_cannot_send_unprepared_requests
PASSED test_requests.py::RequestsTestCase::test_cookie_parameters
PASSED test_requests.py::RequestsTestCase::test_entry_points
PASSED test_requests.py::RequestsTestCase::test_get_auth_from_url
PASSED test_requests.py::RequestsTestCase::test_header_keys_are_native
PASSED test_requests.py::RequestsTestCase::test_hook_receives_request_arguments
PASSED test_requests.py::RequestsTestCase::test_http_error
PASSED test_requests.py::RequestsTestCase::test_links
PASSED test_requests.py::RequestsTestCase::test_long_authinfo_in_url
PASSED test_requests.py::RequestsTestCase::test_mixed_case_scheme_acceptable
PASSED test_requests.py::RequestsTestCase::test_no_content_length
PASSED test_requests.py::RequestsTestCase::test_params_are_added_before_fragment
PASSED test_requests.py::RequestsTestCase::test_path_is_not_double_encoded
PASSED test_requests.py::RequestsTestCase::test_prepared_request_hook
PASSED test_requests.py::RequestsTestCase::test_response_is_iterable
PASSED test_requests.py::RequestsTestCase::test_session_pickling
PASSED test_requests.py::RequestsTestCase::test_transport_adapter_ordering
PASSED test_requests.py::RequestsTestCase::test_unicode_multipart_post_fieldnames
PASSED test_requests.py::TestContentEncodingDetection::test_html4_pragma
PASSED test_requests.py::TestContentEncodingDetection::test_html_charset
PASSED test_requests.py::TestContentEncodingDetection::test_none
PASSED test_requests.py::TestContentEncodingDetection::test_precedence
PASSED test_requests.py::TestContentEncodingDetection::test_xhtml_pragma
PASSED test_requests.py::TestContentEncodingDetection::test_xml
PASSED test_requests.py::TestCaseInsensitiveDict::test_contains
PASSED test_requests.py::TestCaseInsensitiveDict::test_delitem
PASSED test_requests.py::TestCaseInsensitiveDict::test_docstring_example
PASSED test_requests.py::TestCaseInsensitiveDict::test_equality
PASSED test_requests.py::TestCaseInsensitiveDict::test_fixes_649
PASSED test_requests.py::TestCaseInsensitiveDict::test_get
PASSED test_requests.py::TestCaseInsensitiveDict::test_getitem
PASSED test_requests.py::TestCaseInsensitiveDict::test_iter
PASSED test_requests.py::TestCaseInsensitiveDict::test_iterable_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_kwargs_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_len
PASSED test_requests.py::TestCaseInsensitiveDict::test_lower_items
PASSED test_requests.py::TestCaseInsensitiveDict::test_mapping_init
PASSED test_requests.py::TestCaseInsensitiveDict::test_preserve_key_case
PASSED test_requests.py::TestCaseInsensitiveDict::test_preserve_last_key_case
PASSED test_requests.py::TestCaseInsensitiveDict::test_setdefault
PASSED test_requests.py::TestCaseInsensitiveDict::test_update
PASSED test_requests.py::TestCaseInsensitiveDict::test_update_retains_unchanged
PASSED test_requests.py::UtilsTestCase::test_super_len_io_streams
FAILED test_requests.py::RequestsTestCase::test_BASICAUTH_TUPLE_HTTP_200_OK_GET
FAILED test_requests.py::RequestsTestCase::test_DIGESTAUTH_WRONG_HTTP_401_GET
FAILED test_requests.py::RequestsTestCase::test_DIGEST_AUTH_RETURNS_COOKIE - ...
FAILED test_requests.py::RequestsTestCase::test_DIGEST_AUTH_SETS_SESSION_COOKIES
FAILED test_requests.py::RequestsTestCase::test_DIGEST_HTTP_200_OK_GET - Name...
FAILED test_requests.py::RequestsTestCase::test_DIGEST_STREAM - NameError: na...
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_GET_WITH_PARAMS
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_HEAD - NameError:...
FAILED test_requests.py::RequestsTestCase::test_HTTP_200_OK_PUT - NameError: ...
FAILED test_requests.py::RequestsTestCase::test_HTTP_302_ALLOW_REDIRECT_GET
FAILED test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES - Name...
FAILED test_requests.py::RequestsTestCase::test_POSTBIN_GET_POST_FILES_WITH_DATA
FAILED test_requests.py::RequestsTestCase::test_basicauth_with_netrc - NameEr...
FAILED test_requests.py::RequestsTestCase::test_conflicting_post_params - Typ...
FAILED test_requests.py::RequestsTestCase::test_cookie_persists_via_api - Nam...
FAILED test_requests.py::RequestsTestCase::test_cookie_quote_wrapped - NameEr...
FAILED test_requests.py::RequestsTestCase::test_cookie_removed_on_expire - Na...
FAILED test_requests.py::RequestsTestCase::test_cookie_sent_on_redirect - Nam...
FAILED test_requests.py::RequestsTestCase::test_custom_content_type - NameErr...
FAILED test_requests.py::RequestsTestCase::test_decompress_gzip - NameError: ...
FAILED test_requests.py::RequestsTestCase::test_different_encodings_dont_break_post
FAILED test_requests.py::RequestsTestCase::test_fixes_1329 - NameError: name ...
FAILED test_requests.py::RequestsTestCase::test_generic_cookiejar_works - Nam...
FAILED test_requests.py::RequestsTestCase::test_header_remove_is_case_insensitive
FAILED test_requests.py::RequestsTestCase::test_invalid_url - NameError: name...
FAILED test_requests.py::RequestsTestCase::test_params_are_merged_case_sensitive
FAILED test_requests.py::RequestsTestCase::test_prepared_from_session - NameE...
FAILED test_requests.py::RequestsTestCase::test_request_cookie_overrides_session_cookie
FAILED test_requests.py::RequestsTestCase::test_request_ok_set - NameError: n...
FAILED test_requests.py::RequestsTestCase::test_requests_in_history_are_not_overridden
FAILED test_requests.py::RequestsTestCase::test_set_cookie_on_301 - NameError...
FAILED test_requests.py::RequestsTestCase::test_status_raising - NameError: n...
FAILED test_requests.py::RequestsTestCase::test_time_elapsed_blank - NameErro...
FAILED test_requests.py::RequestsTestCase::test_unicode_get - NameError: name...
FAILED test_requests.py::RequestsTestCase::test_unicode_header_name - NameErr...
FAILED test_requests.py::RequestsTestCase::test_unicode_method_name - NameErr...
FAILED test_requests.py::RequestsTestCase::test_unicode_multipart_post - Name...
FAILED test_requests.py::RequestsTestCase::test_uppercase_scheme_redirect - N...
FAILED test_requests.py::RequestsTestCase::test_urlencoded_get_query_multivalued_param
FAILED test_requests.py::RequestsTestCase::test_user_agent_transfers - NameEr...
================== 41 failed, 47 passed, 3 warnings in 8.95s ===================
+ git checkout 1ba83c47ce7b177efe90d5f51f7760680f72eda0 test_requests.py
Updated 1 path from c8e845ad

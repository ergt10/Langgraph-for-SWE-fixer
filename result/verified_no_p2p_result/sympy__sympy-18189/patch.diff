
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index b9f5e3f..bb016ce 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -181,11 +181,10 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             syms = [i for i in syms if i in var]
             if syms != var:
                 dict_sym_index = dict(zip(syms, range(len(syms))))
-                return {tuple([t[dict_sym_index[i]] for i in var])
-                            for t in diophantine(eq, param)}
         n, d = eq.as_numer_denom()
         if n.is_number:
             return set()
+
         if not d.is_number:
             dsol = diophantine(d)
             good = diophantine(n) - dsol

diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index b9f5e3f..df8ad1d 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -344,6 +344,9 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
             elif do_permute_signs_var:
                 permuted_sign_var = set(signed_permutations(sol))
                 final_soln.update(permuted_sign_var)
+            elif syms:
+                dict_sym_index = dict(zip(syms, range(len(syms))))
+                final_soln.add(tuple([sol[dict_sym_index[i]] for i in var]))
             else:
                 final_soln.add(sol)
         else:
@@ -351,6 +354,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     return final_soln
 
 
+
 def merge_solution(var, var_t, solution):
     """
     This is used to construct the full solution from the solutions of sub

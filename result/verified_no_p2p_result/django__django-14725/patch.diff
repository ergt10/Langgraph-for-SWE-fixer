
diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..006ef8e 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -573,12 +573,14 @@ class BaseModelFormSet(BaseFormSet):
     unique_fields = set()
 
     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
-                 queryset=None, *, initial=None, **kwargs):
+                 queryset=None, *, initial=None, max_num=None, **kwargs):
         self.queryset = queryset
         self.initial_extra = initial
+        self.max_num = max_num
         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})
 
     def initial_form_count(self):
+
         """Return the number of forms that are required in this FormSet."""
         if not self.is_bound:
             return len(self.get_queryset())

diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..0dd5ff9 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -584,9 +584,19 @@ class BaseModelFormSet(BaseFormSet):
             return len(self.get_queryset())
         return super().initial_form_count()
 
+    def _get_max_num(self):
+        if self.max_num is not None:
+            return self.max_num
+        # Default to the number of existing objects, if there are any.
+        return self.initial_form_count()
+
+    def total_form_count(self):
+        return min(super().total_form_count(), self._get_max_num())
+
     def _existing_object(self, pk):
         if not hasattr(self, '_object_dict'):
             self._object_dict = {o.pk: o for o in self.get_queryset()}
+
         return self._object_dict.get(pk)
 
     def _get_to_python(self, field):

diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..819f619 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -875,10 +875,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         max_num=None):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
+
             getattr(meta, 'exclude', exclude) is None):
         raise ImproperlyConfigured(
             "Calling modelformset_factory without defining 'fields' or "

diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..8ebb56f 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -890,11 +890,12 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                              widgets=widgets, localized_fields=localized_fields,
                              labels=labels, help_texts=help_texts,
                              error_messages=error_messages, field_classes=field_classes)
-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,
+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, max_num=max_num,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
+
     FormSet.model = model
     return FormSet
 

diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..2e165a3 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1076,10 +1076,13 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
                           widgets=None, validate_max=False, localized_fields=None,
                           labels=None, help_texts=None, error_messages=None,
                           min_num=None, validate_min=False, field_classes=None,
-                          absolute_max=None, can_delete_extra=True, renderer=None):
+                          absolute_max=None, can_delete_extra=True, renderer=None,
+                          max_num=None):
     """
     Return an ``InlineFormSet`` for the given kwargs.
 
+
+
     ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``
     to ``parent_model``.
     """

diff --git a/django/forms/models.py b/django/forms/models.py
index 2db5c72..daef0b4 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1108,9 +1108,11 @@ def inlineformset_factory(parent_model, model, form=ModelForm,
         'field_classes': field_classes,
         'absolute_max': absolute_max,
         'can_delete_extra': can_delete_extra,
+        'max_num': max_num,
         'renderer': renderer,
     }
     FormSet = modelformset_factory(model, **kwargs)
+
     FormSet.fk = fk
     return FormSet
 

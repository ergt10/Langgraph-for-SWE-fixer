
diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 35933b6..8c79590 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -166,14 +166,15 @@ def replace_named_groups(pattern):
     for start, end, group_name in named_group_indices:
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
-        for idx, val in enumerate(pattern[end:]):
+        for idx, val in enumerate(pattern[end:], start=end):
             # If brackets are balanced, the end of the string for the current
             # named capture group pattern has been reached.
             if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
+                group_pattern_and_name.append((pattern[start:idx], group_name))
                 break
 
             # Check for unescaped `(` and `)`. They mark the start and end of a
+
             # nested group.
             if val == '(' and prev_char != '\\':
                 unmatched_open_brackets += 1

diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 35933b6..8f47bc9 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -180,9 +180,15 @@ def replace_named_groups(pattern):
             elif val == ')' and prev_char != '\\':
                 unmatched_open_brackets -= 1
             prev_char = val
+            # If the end of the string is reached, the current character is the
+            # last one.
+            if idx == len(pattern) - 1:
+                group_pattern_and_name.append((pattern[start:], group_name))
+                break
 
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
+
         pattern = pattern.replace(group_pattern, group_name)
     return pattern
 


diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 12ebcde..fdd37fe 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -339,6 +339,7 @@ class MigrationAutodetector:
         Reorder to make things possible. Reordering may be needed so FKs work
         nicely inside the same app.
         """
+
         for app_label, ops in sorted(self.generated_operations.items()):
             # construct a dependency graph for intra-app dependencies
             dependency_graph = {op: set() for op in ops}
@@ -351,10 +352,29 @@ class MigrationAutodetector:
                         for op2 in ops:
                             if self.check_dependency(op2, dep):
                                 dependency_graph[op].add(op2)
+                # If a field is moved from a base class to a subclass, the
+                # RemoveField operation must happen before the AddField
+                # operation.
+                if (
+                    isinstance(op, operations.AddField) and
+                    op.model_name_lower != dep[1].lower()
+                ):
+                    for op2 in ops:
+                        if (
+                            isinstance(op2, operations.RemoveField) and
+                            op.name_lower == op2.name_lower and
+                            op.model_name_lower in {
+                                base.split(".", 1)[1].lower()
+                                for base in self.to_state.models[app_label, op.model_name].bases
+                                if isinstance(base, str)
+                            }
+                        ):
+                            dependency_graph[op].add(op2)
 
             # we use a stable sort for deterministic tests & general behavior
             self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)
 
+
     def _optimize_migrations(self):
         # Add in internal dependencies among the migrations
         for app_label, migrations in self.migrations.items():

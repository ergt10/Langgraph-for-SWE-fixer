
diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index 2924da3..5b2c192 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -1,10 +1,10 @@
 import enum
 
-from django.utils.functional import Promise
-
 __all__ = ['Choices', 'IntegerChoices', 'TextChoices']
 
 
+
+
 class ChoicesMeta(enum.EnumMeta):
     """A metaclass for creating a enum choices."""
 

diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index 2924da3..92d287f 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -12,11 +12,7 @@ class ChoicesMeta(enum.EnumMeta):
         labels = []
         for key in classdict._member_names:
             value = classdict[key]
-            if (
-                isinstance(value, (list, tuple)) and
-                len(value) > 1 and
-                isinstance(value[-1], (Promise, str))
-            ):
+            if isinstance(value, (list, tuple)):
                 *value, label = value
                 value = tuple(value)
             else:
@@ -33,33 +29,10 @@ class ChoicesMeta(enum.EnumMeta):
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
         return enum.unique(cls)
 
-    def __contains__(cls, member):
-        if not isinstance(member, enum.Enum):
-            # Allow non-enums to match against member values.
-            return member in {x.value for x in cls}
-        return super().__contains__(member)
-
-    @property
-    def names(cls):
-        empty = ['__empty__'] if hasattr(cls, '__empty__') else []
-        return empty + [member.name for member in cls]
-
-    @property
-    def choices(cls):
-        empty = [(None, cls.__empty__)] if hasattr(cls, '__empty__') else []
-        return empty + [(member.value, member.label) for member in cls]
-
-    @property
-    def labels(cls):
-        return [label for _, label in cls.choices]
-
-    @property
-    def values(cls):
-        return [value for value, _ in cls.choices]
-
 
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
+
     pass
 
 

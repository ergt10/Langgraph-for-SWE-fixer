
diff --git a/django/forms/fields.py b/django/forms/fields.py
index b31d0ed..cdd030b 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -991,16 +991,10 @@ class MultiValueField(Field):
         for f in fields:
             f.error_messages.setdefault('incomplete',
                                         self.error_messages['incomplete'])
-            if self.disabled:
-                f.disabled = True
-            if self.require_all_fields:
-                # Set 'required' to False on the individual fields, because the
-                # required validation will be handled by MultiValueField, not
-                # by those individual fields.
-                f.required = False
         self.fields = fields
 
     def __deepcopy__(self, memo):
+
         result = super().__deepcopy__(memo)
         result.fields = tuple(x.__deepcopy__(memo) for x in self.fields)
         return result

diff --git a/django/forms/fields.py b/django/forms/fields.py
index b31d0ed..7549b9d 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1035,17 +1035,17 @@ class MultiValueField(Field):
             except IndexError:
                 field_value = None
             if field_value in self.empty_values:
-                if self.require_all_fields:
+                if self.required or field.required:
                     # Raise a 'required' error if the MultiValueField is
                     # required and any field is empty.
                     if self.required:
                         raise ValidationError(self.error_messages['required'], code='required')
-                elif field.required:
                     # Otherwise, add an 'incomplete' error to the list of
                     # collected errors and skip field cleaning, if a required
                     # field is empty.
                     if field.error_messages['incomplete'] not in errors:
                         errors.append(field.error_messages['incomplete'])
+
                     continue
             try:
                 clean_data.append(field.clean(field_value))

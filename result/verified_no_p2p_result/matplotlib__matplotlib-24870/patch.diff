
diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 908a24f..067f8cc 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1121,16 +1121,14 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
         """
         Determine the contour levels and store in self.levels.
         """
-        if self.levels is None:
-            if len(args) == 0:
-                levels_arg = 7  # Default, hard-wired.
-            else:
-                levels_arg = args[0]
+        if self.levels is None and len(args) == 0:
+            levels_arg = 7  # Default, hard-wired.
         else:
-            levels_arg = self.levels
+            levels_arg = args[0] if self.levels is None else self.levels
         if isinstance(levels_arg, Integral):
             self.levels = self._autolev(levels_arg)
         else:
+
             self.levels = np.asarray(levels_arg, np.float64)
 
         if not self.filled:

diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 908a24f..b829d32 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1456,9 +1456,14 @@ class QuadContourSet(ContourSet):
         else:
             raise _api.nargs_error(fn, takes="from 1 to 4", given=nargs)
         z = ma.masked_invalid(z, copy=False)
+        if ma.issubdtype(z.dtype, np.bool_):
+            self.levels = [0.5]
+            _api.warn_external(
+                "Boolean array detected, setting levels to [0.5]")
         self.zmax = float(z.max())
         self.zmin = float(z.min())
         if self.logscale and self.zmin <= 0:
+
             z = ma.masked_where(z <= 0, z)
             _api.warn_external('Log scale: values of z <= 0 have been masked')
             self.zmin = float(z.min())

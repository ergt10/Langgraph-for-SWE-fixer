
diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 04c866a..772f1c1 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,9 +220,11 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        yielded = set()
 
         # build a list of adjustable files
         adjustable_paths = [
+
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]

diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 04c866a..5da1b5a 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -228,14 +228,14 @@ class HashedFilesMixin:
         ]
         # Do a single pass first. Post-process all files once, then repeat for
         # adjustable files.
-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
+        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files, yielded):
             yield name, hashed_name, processed
 
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
+            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files, yielded):
                 yield name, hashed_name, processed
                 substitutions = substitutions or subst
 
@@ -248,11 +248,12 @@ class HashedFilesMixin:
         # Store the processed paths
         self.hashed_files.update(hashed_files)
 
-    def _post_process(self, paths, adjustable_paths, hashed_files):
+    def _post_process(self, paths, adjustable_paths, hashed_files, yielded):
         # Sort the files by directory level
         def path_level(name):
             return len(name.split(os.sep))
 
+
         for name in sorted(paths, key=path_level, reverse=True):
             substitutions = True
             # use the original, local file, not the copied-but-unprocessed

diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 04c866a..fe9ee33 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -318,11 +318,14 @@ class HashedFilesMixin:
                 # and then set the cache accordingly
                 hashed_files[hash_key] = hashed_name
 
-                yield name, hashed_name, processed, substitutions
+                if name not in yielded:
+                    yield name, hashed_name, processed, substitutions
+                    yielded.add(name)
 
     def clean_name(self, name):
         return name.replace('\\', '/')
 
+
     def hash_key(self, name):
         return name
 

diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 04c866a..a851a10 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -345,24 +345,14 @@ class HashedFilesMixin:
         if cache_name:
             return cache_name
         # No cached name found, recalculate it from the files.
-        intermediate_name = name
-        for i in range(self.max_post_process_passes + 1):
-            cache_name = self.clean_name(
-                self.hashed_name(name, content=None, filename=intermediate_name)
-            )
-            if intermediate_name == cache_name:
-                # Store the hashed name if there was a miss.
-                self.hashed_files[hash_key] = cache_name
-                return cache_name
-            else:
-                # Move on to the next intermediate file.
-                intermediate_name = cache_name
-        # If the cache name can't be determined after the max number of passes,
-        # the intermediate files on disk may be corrupt; avoid an infinite loop.
-        raise ValueError("The name '%s' could not be hashed with %r." % (name, self))
+        cache_name = self.clean_name(self.hashed_name(name))
+        # Store the hashed name if there was a miss.
+        self.hashed_files[hash_key] = cache_name
+        return cache_name
 
 
 class ManifestFilesMixin(HashedFilesMixin):
+
     manifest_version = '1.0'  # the manifest format standard
     manifest_name = 'staticfiles.json'
     manifest_strict = True

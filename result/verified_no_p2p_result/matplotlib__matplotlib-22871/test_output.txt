+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/dates.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit a7b7260bf06c20d408215d95ce20a1a01c12e5b1
Merge: 036f1038f7 99f11d54f9
Author: Oscar Gustafsson <oscar.gustafsson@gmail.com>
Date:   Thu Apr 21 11:31:07 2022 +0200

    Merge pull request #21374 from ericpre/snap_selectors
    
    Snap selectors

+ git diff a7b7260bf06c20d408215d95ce20a1a01c12e5b1
diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 4d8ddf3ee5..586f6fcbb4 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -798,11 +798,11 @@ class ConciseDateFormatter(ticker.Formatter):
         for level in range(5, -1, -1):
             if len(np.unique(tickdate[:, level])) > 1:
                 if level < 2:
-                    show_offset = False
-                break
+                    break
             elif level == 0:
                 # all tickdate are the same, so only micros might be different
                 # set to the most precise (6: microseconds doesn't exist...)
+
                 level = 5
 
         # level is the basic level we will label at.
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (10.0.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (2.8.2)
Requirement already satisfied: setuptools_scm>=4 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505) (4.7.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.6.0.dev2071+ga7b7260bf0
    Uninstalling matplotlib-3.6.0.dev2071+ga7b7260bf0:
      Successfully uninstalled matplotlib-3.6.0.dev2071+ga7b7260bf0
  DEPRECATION: Legacy editable install of matplotlib==3.6.0.dev2071+ga7b7260bf0.d20250505 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for matplotlib
Successfully installed matplotlib-3.6.0.dev2071+ga7b7260bf0.d20250505
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout a7b7260bf06c20d408215d95ce20a1a01c12e5b1 lib/matplotlib/tests/test_dates.py
Updated 0 paths from cd2d21be7e
+ git apply -v -
Checking patch lib/matplotlib/tests/test_dates.py...
Applied patch lib/matplotlib/tests/test_dates.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_dates.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: xdist-3.6.1, timeout-2.3.1, rerunfailures-14.0, cov-5.0.0
collected 89 items

lib/matplotlib/tests/test_dates.py ..................................... [ 41%]
......FF.FFFF.F.FFFFFF...............F..............                     [100%]

=================================== FAILURES ===================================
____________________________ test_concise_formatter ____________________________

    def test_concise_formatter():
        def _create_auto_date_locator(date1, date2):
            fig, ax = plt.subplots()
    
            locator = mdates.AutoDateLocator(interval_multiples=True)
            formatter = mdates.ConciseDateFormatter(locator)
            ax.yaxis.set_major_locator(locator)
            ax.yaxis.set_major_formatter(formatter)
            ax.set_ylim(date1, date2)
            fig.canvas.draw()
            sts = [st.get_text() for st in ax.get_yticklabels()]
            return sts
    
        d1 = datetime.datetime(1997, 1, 1)
        results = ([datetime.timedelta(weeks=52 * 200),
                    [str(t) for t in range(1980, 2201, 20)]
                    ],
                   [datetime.timedelta(weeks=52),
                    ['1997', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug',
                     'Sep', 'Oct', 'Nov', 'Dec']
                    ],
                   [datetime.timedelta(days=141),
                    ['Jan', '15', 'Feb', '15', 'Mar', '15', 'Apr', '15',
                     'May', '15']
                    ],
                   [datetime.timedelta(days=40),
                    ['Jan', '05', '09', '13', '17', '21', '25', '29', 'Feb',
                     '05', '09']
                    ],
                   [datetime.timedelta(hours=40),
                    ['Jan-01', '04:00', '08:00', '12:00', '16:00', '20:00',
                     'Jan-02', '04:00', '08:00', '12:00', '16:00']
                    ],
                   [datetime.timedelta(minutes=20),
                    ['00:00', '00:05', '00:10', '00:15', '00:20']
                    ],
                   [datetime.timedelta(seconds=40),
                    ['00:00', '05', '10', '15', '20', '25', '30', '35', '40']
                    ],
                   [datetime.timedelta(seconds=2),
                    ['59.5', '00:00', '00.5', '01.0', '01.5', '02.0', '02.5']
                    ],
                   )
        for t_delta, expected in results:
            d2 = d1 + t_delta
            strings = _create_auto_date_locator(d1, d2)
>           assert strings == expected
E           AssertionError: assert ['1997', '199...', 'Mar', ...] == ['Jan', '15',...r', '15', ...]
E             
E             At index 0 diff: '1997' != 'Jan'
E             Use -v to get more diff

lib/matplotlib/tests/test_dates.py:589: AssertionError
________ test_concise_formatter_show_offset[t_delta0-1997-Jan-01 00:00] ________

t_delta = datetime.timedelta(microseconds=10000), expected = '1997-Jan-01 00:00'

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(seconds=0.01), '1997-Jan-01 00:00'),
        (datetime.timedelta(minutes=1), '1997-Jan-01 00:01'),
        (datetime.timedelta(hours=1), '1997-Jan-01'),
        (datetime.timedelta(days=1), '1997-Jan-02'),
        (datetime.timedelta(weeks=1), '1997-Jan'),
        (datetime.timedelta(weeks=26), ''),
        (datetime.timedelta(weeks=520), '')
    ])
    def test_concise_formatter_show_offset(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        fig, ax = plt.subplots()
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.canvas.draw()
>       assert formatter.get_offset() == expected
E       AssertionError: assert '1997' == '1997-Jan-01 00:00'
E         
E         - 1997-Jan-01 00:00
E         + 1997

lib/matplotlib/tests/test_dates.py:613: AssertionError
___________ test_concise_formatter_show_offset[t_delta2-1997-Jan-01] ___________

t_delta = datetime.timedelta(seconds=3600), expected = '1997-Jan-01'

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(seconds=0.01), '1997-Jan-01 00:00'),
        (datetime.timedelta(minutes=1), '1997-Jan-01 00:01'),
        (datetime.timedelta(hours=1), '1997-Jan-01'),
        (datetime.timedelta(days=1), '1997-Jan-02'),
        (datetime.timedelta(weeks=1), '1997-Jan'),
        (datetime.timedelta(weeks=26), ''),
        (datetime.timedelta(weeks=520), '')
    ])
    def test_concise_formatter_show_offset(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        fig, ax = plt.subplots()
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.canvas.draw()
>       assert formatter.get_offset() == expected
E       AssertionError: assert '1997-Jan-01 01:00' == '1997-Jan-01'
E         
E         - 1997-Jan-01
E         + 1997-Jan-01 01:00
E         ?            ++++++

lib/matplotlib/tests/test_dates.py:613: AssertionError
___________ test_concise_formatter_show_offset[t_delta3-1997-Jan-02] ___________

t_delta = datetime.timedelta(days=1), expected = '1997-Jan-02'

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(seconds=0.01), '1997-Jan-01 00:00'),
        (datetime.timedelta(minutes=1), '1997-Jan-01 00:01'),
        (datetime.timedelta(hours=1), '1997-Jan-01'),
        (datetime.timedelta(days=1), '1997-Jan-02'),
        (datetime.timedelta(weeks=1), '1997-Jan'),
        (datetime.timedelta(weeks=26), ''),
        (datetime.timedelta(weeks=520), '')
    ])
    def test_concise_formatter_show_offset(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        fig, ax = plt.subplots()
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.canvas.draw()
>       assert formatter.get_offset() == expected
E       AssertionError: assert '1997-Jan-02 00:00' == '1997-Jan-02'
E         
E         - 1997-Jan-02
E         + 1997-Jan-02 00:00
E         ?            ++++++

lib/matplotlib/tests/test_dates.py:613: AssertionError
____________ test_concise_formatter_show_offset[t_delta4-1997-Jan] _____________

t_delta = datetime.timedelta(days=7), expected = '1997-Jan'

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(seconds=0.01), '1997-Jan-01 00:00'),
        (datetime.timedelta(minutes=1), '1997-Jan-01 00:01'),
        (datetime.timedelta(hours=1), '1997-Jan-01'),
        (datetime.timedelta(days=1), '1997-Jan-02'),
        (datetime.timedelta(weeks=1), '1997-Jan'),
        (datetime.timedelta(weeks=26), ''),
        (datetime.timedelta(weeks=520), '')
    ])
    def test_concise_formatter_show_offset(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        fig, ax = plt.subplots()
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.canvas.draw()
>       assert formatter.get_offset() == expected
E       AssertionError: assert '1997-Jan-08 00:00' == '1997-Jan'
E         
E         - 1997-Jan
E         + 1997-Jan-08 00:00

lib/matplotlib/tests/test_dates.py:613: AssertionError
________________ test_concise_formatter_show_offset[t_delta5-] _________________

t_delta = datetime.timedelta(days=182), expected = ''

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(seconds=0.01), '1997-Jan-01 00:00'),
        (datetime.timedelta(minutes=1), '1997-Jan-01 00:01'),
        (datetime.timedelta(hours=1), '1997-Jan-01'),
        (datetime.timedelta(days=1), '1997-Jan-02'),
        (datetime.timedelta(weeks=1), '1997-Jan'),
        (datetime.timedelta(weeks=26), ''),
        (datetime.timedelta(weeks=520), '')
    ])
    def test_concise_formatter_show_offset(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        fig, ax = plt.subplots()
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.canvas.draw()
>       assert formatter.get_offset() == expected
E       AssertionError: assert '1997' == ''
E         
E         + 1997

lib/matplotlib/tests/test_dates.py:613: AssertionError
_____________________________ test_offset_changes ______________________________

    def test_offset_changes():
        fig, ax = plt.subplots()
    
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + datetime.timedelta(weeks=520)
    
        locator = mdates.AutoDateLocator()
        formatter = mdates.ConciseDateFormatter(locator)
        ax.xaxis.set_major_locator(locator)
        ax.xaxis.set_major_formatter(formatter)
    
        ax.plot([d1, d2], [0, 0])
        fig.draw_without_rendering()
        assert formatter.get_offset() == ''
        ax.set_xlim(d1, d1 + datetime.timedelta(weeks=3))
        fig.draw_without_rendering()
>       assert formatter.get_offset() == '1997-Jan'
E       AssertionError: assert '1997-Jan-21 00:00' == '1997-Jan'
E         
E         - 1997-Jan
E         + 1997-Jan-21 00:00

lib/matplotlib/tests/test_dates.py:632: AssertionError
______________ test_concise_formatter_usetex[t_delta1-expected1] _______________

t_delta = datetime.timedelta(days=40)
expected = ['Jan', '05', '09', '13', '17', '21', ...]

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(weeks=52 * 200),
         range(1980, 2201, 20)),
        (datetime.timedelta(days=40),
         ['Jan', '05', '09', '13', '17', '21', '25', '29', 'Feb', '05', '09']),
        (datetime.timedelta(hours=40),
         ['Jan-01', '04:00', '08:00', '12:00', '16:00', '20:00',
          'Jan-02', '04:00', '08:00', '12:00', '16:00']),
        (datetime.timedelta(seconds=2),
         ['59.5', '00:00', '00.5', '01.0', '01.5', '02.0', '02.5']),
    ])
    def test_concise_formatter_usetex(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        locator = mdates.AutoDateLocator(interval_multiples=True)
        locator.create_dummy_axis()
        locator.axis.set_view_interval(mdates.date2num(d1), mdates.date2num(d2))
    
        formatter = mdates.ConciseDateFormatter(locator, usetex=True)
>       assert formatter.format_ticks(locator()) == [
            r'{\fontfamily{\familydefault}\selectfont %s}' % s for s in expected]
E       AssertionError: assert ['{\\fontfami...t 1997}', ...] == ['{\\fontfami...ont 21}', ...]
E         
E         At index 0 diff: '{\\fontfamily{\\familydefault}\\selectfont 1997}' != '{\\fontfamily{\\familydefault}\\selectfont Jan}'
E         Use -v to get more diff

lib/matplotlib/tests/test_dates.py:662: AssertionError
______________ test_concise_formatter_usetex[t_delta2-expected2] _______________

t_delta = datetime.timedelta(days=1, seconds=57600)
expected = ['Jan-01', '04:00', '08:00', '12:00', '16:00', '20:00', ...]

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(weeks=52 * 200),
         range(1980, 2201, 20)),
        (datetime.timedelta(days=40),
         ['Jan', '05', '09', '13', '17', '21', '25', '29', 'Feb', '05', '09']),
        (datetime.timedelta(hours=40),
         ['Jan-01', '04:00', '08:00', '12:00', '16:00', '20:00',
          'Jan-02', '04:00', '08:00', '12:00', '16:00']),
        (datetime.timedelta(seconds=2),
         ['59.5', '00:00', '00.5', '01.0', '01.5', '02.0', '02.5']),
    ])
    def test_concise_formatter_usetex(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        locator = mdates.AutoDateLocator(interval_multiples=True)
        locator.create_dummy_axis()
        locator.axis.set_view_interval(mdates.date2num(d1), mdates.date2num(d2))
    
        formatter = mdates.ConciseDateFormatter(locator, usetex=True)
>       assert formatter.format_ticks(locator()) == [
            r'{\fontfamily{\familydefault}\selectfont %s}' % s for s in expected]
E       AssertionError: assert ['{\\fontfami... 20:00}', ...] == ['{\\fontfami... 20:00}', ...]
E         
E         At index 0 diff: '{\\fontfamily{\\familydefault}\\selectfont 00:00}' != '{\\fontfamily{\\familydefault}\\selectfont Jan-01}'
E         Use -v to get more diff

lib/matplotlib/tests/test_dates.py:662: AssertionError
______________ test_concise_formatter_usetex[t_delta3-expected3] _______________

t_delta = datetime.timedelta(seconds=2)
expected = ['59.5', '00:00', '00.5', '01.0', '01.5', '02.0', ...]

    @pytest.mark.parametrize('t_delta, expected', [
        (datetime.timedelta(weeks=52 * 200),
         range(1980, 2201, 20)),
        (datetime.timedelta(days=40),
         ['Jan', '05', '09', '13', '17', '21', '25', '29', 'Feb', '05', '09']),
        (datetime.timedelta(hours=40),
         ['Jan-01', '04:00', '08:00', '12:00', '16:00', '20:00',
          'Jan-02', '04:00', '08:00', '12:00', '16:00']),
        (datetime.timedelta(seconds=2),
         ['59.5', '00:00', '00.5', '01.0', '01.5', '02.0', '02.5']),
    ])
    def test_concise_formatter_usetex(t_delta, expected):
        d1 = datetime.datetime(1997, 1, 1)
        d2 = d1 + t_delta
    
        locator = mdates.AutoDateLocator(interval_multiples=True)
        locator.create_dummy_axis()
        locator.axis.set_view_interval(mdates.date2num(d1), mdates.date2num(d2))
    
        formatter = mdates.ConciseDateFormatter(locator, usetex=True)
>       assert formatter.format_ticks(locator()) == [
            r'{\fontfamily{\familydefault}\selectfont %s}' % s for s in expected]
E       AssertionError: assert ['{\\fontfami...t 1997}', ...] == ['{\\fontfami...t 02.0}', ...]
E         
E         At index 0 diff: '{\\fontfamily{\\familydefault}\\selectfont Dec}' != '{\\fontfamily{\\familydefault}\\selectfont 59.5}'
E         Use -v to get more diff

lib/matplotlib/tests/test_dates.py:662: AssertionError
________________________ test_concise_formatter_formats ________________________

    def test_concise_formatter_formats():
        formats = ['%Y', '%m/%Y', 'day: %d',
                   '%H hr %M min', '%H hr %M min', '%S.%f sec']
    
        def _create_auto_date_locator(date1, date2):
            fig, ax = plt.subplots()
    
            locator = mdates.AutoDateLocator(interval_multiples=True)
            formatter = mdates.ConciseDateFormatter(locator, formats=formats)
            ax.yaxis.set_major_locator(locator)
            ax.yaxis.set_major_formatter(formatter)
            ax.set_ylim(date1, date2)
            fig.canvas.draw()
            sts = [st.get_text() for st in ax.get_yticklabels()]
            return sts
    
        d1 = datetime.datetime(1997, 1, 1)
        results = (
            [datetime.timedelta(weeks=52 * 200), [str(t) for t in range(1980,
             2201, 20)]],
            [datetime.timedelta(weeks=52), [
                '1997', '02/1997', '03/1997', '04/1997', '05/1997', '06/1997',
                '07/1997', '08/1997', '09/1997', '10/1997', '11/1997', '12/1997',
                ]],
            [datetime.timedelta(days=141), [
                '01/1997', 'day: 15', '02/1997', 'day: 15', '03/1997', 'day: 15',
                '04/1997', 'day: 15', '05/1997', 'day: 15',
                ]],
            [datetime.timedelta(days=40), [
                '01/1997', 'day: 05', 'day: 09', 'day: 13', 'day: 17', 'day: 21',
                'day: 25', 'day: 29', '02/1997', 'day: 05', 'day: 09',
                ]],
            [datetime.timedelta(hours=40), [
                'day: 01', '04 hr 00 min', '08 hr 00 min', '12 hr 00 min',
                '16 hr 00 min', '20 hr 00 min', 'day: 02', '04 hr 00 min',
                '08 hr 00 min', '12 hr 00 min', '16 hr 00 min',
                ]],
            [datetime.timedelta(minutes=20), ['00 hr 00 min', '00 hr 05 min',
             '00 hr 10 min', '00 hr 15 min', '00 hr 20 min']],
            [datetime.timedelta(seconds=40), [
                '00 hr 00 min', '05.000000 sec', '10.000000 sec',
                '15.000000 sec', '20.000000 sec', '25.000000 sec',
                '30.000000 sec', '35.000000 sec', '40.000000 sec',
                ]],
            [datetime.timedelta(seconds=2), [
                '59.500000 sec', '00 hr 00 min', '00.500000 sec', '01.000000 sec',
                '01.500000 sec', '02.000000 sec', '02.500000 sec',
                ]],
            )
        for t_delta, expected in results:
            d2 = d1 + t_delta
            strings = _create_auto_date_locator(d1, d2)
>           assert strings == expected
E           AssertionError: assert ['1997', '199...03/1997', ...] == ['01/1997', '...day: 15', ...]
E             
E             At index 0 diff: '1997' != '01/1997'
E             Use -v to get more diff

lib/matplotlib/tests/test_dates.py:718: AssertionError
_______________________ test_concise_formatter_zformats ________________________

    def test_concise_formatter_zformats():
        zero_formats = ['', "'%y", '%B', '%m-%d', '%S', '%S.%f']
    
        def _create_auto_date_locator(date1, date2):
            fig, ax = plt.subplots()
    
            locator = mdates.AutoDateLocator(interval_multiples=True)
            formatter = mdates.ConciseDateFormatter(
                locator, zero_formats=zero_formats)
            ax.yaxis.set_major_locator(locator)
            ax.yaxis.set_major_formatter(formatter)
            ax.set_ylim(date1, date2)
            fig.canvas.draw()
            sts = [st.get_text() for st in ax.get_yticklabels()]
            return sts
    
        d1 = datetime.datetime(1997, 1, 1)
        results = ([datetime.timedelta(weeks=52 * 200),
                    [str(t) for t in range(1980, 2201, 20)]
                    ],
                   [datetime.timedelta(weeks=52),
                    ["'97", 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                    ],
                   [datetime.timedelta(days=141),
                    ['January', '15', 'February', '15', 'March',
                        '15', 'April', '15', 'May', '15']
                    ],
                   [datetime.timedelta(days=40),
                    ['January', '05', '09', '13', '17', '21',
                        '25', '29', 'February', '05', '09']
                    ],
                   [datetime.timedelta(hours=40),
                    ['01-01', '04:00', '08:00', '12:00', '16:00', '20:00',
                        '01-02', '04:00', '08:00', '12:00', '16:00']
                    ],
                   [datetime.timedelta(minutes=20),
                    ['00', '00:05', '00:10', '00:15', '00:20']
                    ],
                   [datetime.timedelta(seconds=40),
                    ['00', '05', '10', '15', '20', '25', '30', '35', '40']
                    ],
                   [datetime.timedelta(seconds=2),
                    ['59.5', '00.0', '00.5', '01.0', '01.5', '02.0', '02.5']
                    ],
                   )
        for t_delta, expected in results:
            d2 = d1 + t_delta
            strings = _create_auto_date_locator(d1, d2)
>           assert strings == expected
E           assert ["'97", "'97"...', 'Mar', ...] == ['January', '...h', '15', ...]
E             
E             At index 0 diff: "'97" != 'January'
E             Use -v to get more diff

lib/matplotlib/tests/test_dates.py:770: AssertionError
__________________________ test_concise_formatter_tz ___________________________

    def test_concise_formatter_tz():
        def _create_auto_date_locator(date1, date2, tz):
            fig, ax = plt.subplots()
    
            locator = mdates.AutoDateLocator(interval_multiples=True)
            formatter = mdates.ConciseDateFormatter(locator, tz=tz)
            ax.yaxis.set_major_locator(locator)
            ax.yaxis.set_major_formatter(formatter)
            ax.set_ylim(date1, date2)
            fig.canvas.draw()
            sts = [st.get_text() for st in ax.get_yticklabels()]
            return sts, ax.yaxis.get_offset_text().get_text()
    
        d1 = datetime.datetime(1997, 1, 1).replace(tzinfo=datetime.timezone.utc)
        results = ([datetime.timedelta(hours=40),
                    ['03:00', '07:00', '11:00', '15:00', '19:00', '23:00',
                     '03:00', '07:00', '11:00', '15:00', '19:00'],
                    "1997-Jan-02"
                    ],
                   [datetime.timedelta(minutes=20),
                    ['03:00', '03:05', '03:10', '03:15', '03:20'],
                    "1997-Jan-01"
                    ],
                   [datetime.timedelta(seconds=40),
                    ['03:00', '05', '10', '15', '20', '25', '30', '35', '40'],
                    "1997-Jan-01 03:00"
                    ],
                   [datetime.timedelta(seconds=2),
                    ['59.5', '03:00', '00.5', '01.0', '01.5', '02.0', '02.5'],
                    "1997-Jan-01 03:00"
                    ],
                   )
    
        new_tz = datetime.timezone(datetime.timedelta(hours=3))
        for t_delta, expected_strings, expected_offset in results:
            d2 = d1 + t_delta
            strings, offset = _create_auto_date_locator(d1, d2, new_tz)
            assert strings == expected_strings
>           assert offset == expected_offset
E           AssertionError: assert '1997-Jan-02 19:00' == '1997-Jan-02'
E             
E             - 1997-Jan-02
E             + 1997-Jan-02 19:00
E             ?            ++++++

lib/matplotlib/tests/test_dates.py:811: AssertionError
____________________________ test_change_converter _____________________________

    def test_change_converter():
        plt.rcParams['date.converter'] = 'concise'
        dates = np.arange('2020-01-01', '2020-05-01', dtype='datetime64[D]')
        fig, ax = plt.subplots()
    
        ax.plot(dates, np.arange(len(dates)))
        fig.canvas.draw()
>       assert ax.get_xticklabels()[0].get_text() == 'Jan'
E       AssertionError: assert '2020' == 'Jan'
E         
E         - Jan
E         + 2020

lib/matplotlib/tests/test_dates.py:1175: AssertionError
==================================== PASSES ====================================
___________________________ test_too_many_date_ticks ___________________________
------------------------------ Captured log call -------------------------------
WARNING  matplotlib.ticker:ticker.py:1646 Locator attempting to generate 1461 ticks ([10246.0, ..., 11706.0]), which exceeds Locator.MAXTICKS (1000).
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_dates.py::test_date_numpyx
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[s]-t00]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[s]-t01]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[s]-t02]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[us]-t00]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[us]-t01]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[us]-t02]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ms]-t00]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ms]-t01]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ms]-t02]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ns]-t00]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ns]-t01]
PASSED lib/matplotlib/tests/test_dates.py::test_date_date2num_numpy[datetime64[ns]-t02]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT[datetime64[s]]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT[datetime64[us]]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT[datetime64[ms]]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT[datetime64[ns]]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT_scalar[s]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT_scalar[ms]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT_scalar[us]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_NaT_scalar[ns]
PASSED lib/matplotlib/tests/test_dates.py::test_date_empty
PASSED lib/matplotlib/tests/test_dates.py::test_date_not_empty
PASSED lib/matplotlib/tests/test_dates.py::test_axhline
PASSED lib/matplotlib/tests/test_dates.py::test_date_axhspan[png]
PASSED lib/matplotlib/tests/test_dates.py::test_date_axvspan[png]
PASSED lib/matplotlib/tests/test_dates.py::test_date_axhline[png]
PASSED lib/matplotlib/tests/test_dates.py::test_date_axvline[png]
PASSED lib/matplotlib/tests/test_dates.py::test_too_many_date_ticks
PASSED lib/matplotlib/tests/test_dates.py::test_RRuleLocator[png]
PASSED lib/matplotlib/tests/test_dates.py::test_RRuleLocator_dayrange
PASSED lib/matplotlib/tests/test_dates.py::test_RRuleLocator_close_minmax
PASSED lib/matplotlib/tests/test_dates.py::test_DateFormatter[png]
PASSED lib/matplotlib/tests/test_dates.py::test_locator_set_formatter
PASSED lib/matplotlib/tests/test_dates.py::test_date_formatter_callable
PASSED lib/matplotlib/tests/test_dates.py::test_date_formatter_usetex[delta0-expected0]
PASSED lib/matplotlib/tests/test_dates.py::test_date_formatter_usetex[delta1-expected1]
PASSED lib/matplotlib/tests/test_dates.py::test_date_formatter_usetex[delta2-expected2]
PASSED lib/matplotlib/tests/test_dates.py::test_date_formatter_usetex[delta3-expected3]
PASSED lib/matplotlib/tests/test_dates.py::test_drange
PASSED lib/matplotlib/tests/test_dates.py::test_auto_date_locator
PASSED lib/matplotlib/tests/test_dates.py::test_auto_date_locator_intmult
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_subsecond
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta1-1997-Jan-01 00:01]
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta6-]
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_usetex[t_delta0-expected0]
PASSED lib/matplotlib/tests/test_dates.py::test_auto_date_locator_intmult_tz
PASSED lib/matplotlib/tests/test_dates.py::test_date_inverted_limit[png]
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_dst
PASSED lib/matplotlib/tests/test_dates.py::test_date2num_dst_pandas
PASSED lib/matplotlib/tests/test_dates.py::test_rrulewrapper
PASSED lib/matplotlib/tests/test_dates.py::test_rrulewrapper_pytz
PASSED lib/matplotlib/tests/test_dates.py::test_yearlocator_pytz
PASSED lib/matplotlib/tests/test_dates.py::test_YearLocator
PASSED lib/matplotlib/tests/test_dates.py::test_DayLocator
PASSED lib/matplotlib/tests/test_dates.py::test_tz_utc
PASSED lib/matplotlib/tests/test_dates.py::test_num2timedelta[1-tdelta0]
PASSED lib/matplotlib/tests/test_dates.py::test_num2timedelta[x1-tdelta1]
PASSED lib/matplotlib/tests/test_dates.py::test_datetime64_in_list
PASSED lib/matplotlib/tests/test_dates.py::test_change_epoch
PASSED lib/matplotlib/tests/test_dates.py::test_warn_notintervals
PASSED lib/matplotlib/tests/test_dates.py::test_change_interval_multiples
PASSED lib/matplotlib/tests/test_dates.py::test_epoch2num
PASSED lib/matplotlib/tests/test_dates.py::test_julian2num
PASSED lib/matplotlib/tests/test_dates.py::test_DateLocator
PASSED lib/matplotlib/tests/test_dates.py::test_datestr2num
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_exceptions
PASSED lib/matplotlib/tests/test_dates.py::test_concise_formatter_call
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[0.02-MinuteLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[1-HourLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[19-DayLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[40-WeekdayLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[200-MonthLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_date_ticker_factory[2000-YearLocator]
PASSED lib/matplotlib/tests/test_dates.py::test_usetex_newline
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter - Assertion...
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta0-1997-Jan-01 00:00]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta2-1997-Jan-01]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta3-1997-Jan-02]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta4-1997-Jan]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_show_offset[t_delta5-]
FAILED lib/matplotlib/tests/test_dates.py::test_offset_changes - AssertionErr...
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_usetex[t_delta1-expected1]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_usetex[t_delta2-expected2]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_usetex[t_delta3-expected3]
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_formats - A...
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_zformats - ...
FAILED lib/matplotlib/tests/test_dates.py::test_concise_formatter_tz - Assert...
FAILED lib/matplotlib/tests/test_dates.py::test_change_converter - AssertionE...
======================== 14 failed, 75 passed in 5.31s =========================
+ git checkout a7b7260bf06c20d408215d95ce20a1a01c12e5b1 lib/matplotlib/tests/test_dates.py
Updated 1 path from cd2d21be7e


diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 327e752..16e899a 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -6,10 +6,12 @@ import operator
 import uuid
 import warnings
 from base64 import b64decode, b64encode
+from enum import Enum
 from functools import partialmethod, total_ordering
 
 from django import forms
 from django.apps import apps
+
 from django.conf import settings
 from django.core import checks, exceptions, validators
 from django.db import connection, connections, router

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 327e752..3d3641c 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2436,4 +2436,66 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
         return 'SmallAutoField'
 
     def rel_db_type(self, connection):
-        return SmallIntegerField().db_type(connection=connection)
+        return SmallIntegerField().db_type(connection=connection)
+
+
+class ChoicesEnum(Enum):
+    """
+    Base class for creating enumerations that can be used as choices for a
+    field.
+
+    class YearInSchool(ChoicesEnum):
+        FRESHMAN = 1
+        SOPHOMORE = 2
+        JUNIOR = 3
+        SENIOR = 4
+        GRADUATE = 5
+
+    class MyModel(models.Model):
+        year_in_school = models.IntegerField(choices=YearInSchool.choices)
+
+    >>> MyModel.year_in_school.choices
+    [(1, 'Freshman'), (2, 'Sophomore'), (3, 'Junior'), (4, 'Senior'), (5, 'Graduate')]
+    >>> MyModel.year_in_school.max_length
+    1
+    """
+    do_not_call_in_templates = True
+
+    @classmethod
+    def choices(cls):
+        """
+        Return a list of 2-tuples like the Django choices setting.
+        """
+        return [(tag.value, tag.label) for tag in cls]
+
+    @property
+    def label(self):
+        """
+        Return the label of the enum member.
+        """
+        return self._value2label_map_[self.value]
+
+    @classmethod
+    def labels(cls):
+        """
+        Return a list of labels of the enum members.
+        """
+        return [tag.label for tag in cls]
+
+    @classmethod
+    def values(cls):
+        """
+        Return a list of values of the enum members.
+        """
+        return [tag.value for tag in cls]
+
+    @classmethod
+    def max_length(cls):
+        """
+        Return the max length of the values of the enum members.
+        """
+        return max(len(str(value)) for value in cls.values())
+
+    @classmethod
+    def _value2label_map_(cls):
+        return {tag.value: tag.name.replace('_', ' ').title() for tag in cls}

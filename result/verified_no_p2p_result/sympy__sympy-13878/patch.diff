
diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..a28fac5 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,10 +47,12 @@ from __future__ import print_function, division
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, erf, erfc, I, uppergamma, hyper,
+                   hgf_reg)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
+
         ContinuousDistributionHandmade)
 from sympy.stats.rv import _value_check
 import random

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..b152be9 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -153,10 +153,19 @@ class ArcsinDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.NegativeOne/2, x < a),
+            (S.NegativeOne/2 + atan(sqrt((x - a)*(b - x)))/pi, x <= b),
+            (S.Half, True)
+        )
+
 def Arcsin(name, a=0, b=1):
     r"""
     Create a Continuous Random Variable with an arcsin distribution.
 
+
     The density of the arcsin distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..d0da217 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -670,9 +670,16 @@ class DagumDistribution(SingleContinuousDistribution):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
 
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (S.Zero, x < b),
+            (S.One - beta_fn(p, S.Zero, (b/x)**a), True)
+        )
 
 def Dagum(name, p, a, b):
     r"""
+
     Create a continuous random variable with a Dagum distribution.
 
     The density of the Dagum distribution is given by

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..f350fb6 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -763,19 +763,17 @@ def Erlang(name, k, l):
     ---------------
         gamma(k)
 
-    >>> C = cdf(X, meijerg=True)(z)
+    >>> C = cdf(X)(z)
     >>> pprint(C, use_unicode=False)
-    /   -2*I*pi*k
-    |k*e         *lowergamma(k, l*z)
-    |-------------------------------  for z >= 0
-    <          gamma(k + 1)
-    |
-    |               0                 otherwise
-    \
+    /k*lowergamma(k, l*z)  for z >= 0
+    <---------------------
+    \     gamma(k + 1)     otherwise
 
     >>> simplify(E(X))
     k/l
 
+
+
     >>> simplify(variance(X))
     k/l**2
 

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..9156b7e 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1042,10 +1042,18 @@ class FrechetDistribution(SingleContinuousDistribution):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
 
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (S.One - exp(-((x-m)/s)**(-a)), x >= m),
+            (S.Zero, True)
+        )
+
 def Frechet(name, a, s=1, m=0):
     r"""
     Create a continuous random variable with a Frechet distribution.
 
+
     The density of the Frechet distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..3757a92 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1108,10 +1108,19 @@ class GammaDistribution(SingleContinuousDistribution):
         k, theta = self.k, self.theta
         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (lowergamma(k, x/theta)/gamma(k + 1), x >= 0),
+            (S.Zero, True)
+        )
+
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
 
+
+
 def Gamma(name, k, theta):
     r"""
     Create a continuous random variable with a Gamma distribution.

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..ccfaf0a 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1200,10 +1200,18 @@ class GammaInverseDistribution(SingleContinuousDistribution):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (uppergamma(a, b/x)/gamma(a), x > 0),
+            (S.Zero, True)
+        )
+
 def GammaInverse(name, a, b):
     r"""
     Create a continuous random variable with an inverse Gamma distribution.
 
+
     The density of the inverse Gamma distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..7e85508 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1385,10 +1385,18 @@ class KumaraswamyDistribution(SingleContinuousDistribution):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
 
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.One - (S.One - x**a)**b, x <= 1),
+            (S.One, True)
+        )
+
 def Kumaraswamy(name, a, b):
     r"""
     Create a Continuous Random Variable with a Kumaraswamy distribution.
 
+
     The density of the Kumaraswamy distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..f9e63d6 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1445,11 +1445,19 @@ class LaplaceDistribution(SingleContinuousDistribution):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
 
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half*exp((mu - x)/b), x < mu),
+            (S.One - S.Half*exp((mu - x)/b), True)
+        )
 
 def Laplace(name, mu, b):
     r"""
     Create a continuous random variable with a Laplace distribution.
 
+    Create a continuous random variable with a Laplace distribution.
+
     The density of the Laplace distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..ca0567c 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1501,11 +1501,19 @@ class LogisticDistribution(SingleContinuousDistribution):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
 
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return Piecewise(
+            (S.One/(S.One + exp((mu - x)/s)), x < oo),
+            (S.One, True)
+        )
 
 def Logistic(name, mu, s):
     r"""
     Create a continuous random variable with a logistic distribution.
 
+    Create a continuous random variable with a logistic distribution.
+
     The density of the logistic distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..a2d2a1b 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -1711,11 +1711,19 @@ class NakagamiDistribution(SingleContinuousDistribution):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
 
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return Piecewise(
+            (lowergamma(mu, mu/omega*x**2)/gamma(mu + 1), x > 0),
+            (S.Zero, True)
+        )
 
 def Nakagami(name, mu, omega):
     r"""
     Create a continuous random variable with a Nakagami distribution.
 
+    Create a continuous random variable with a Nakagami distribution.
+
     The density of the Nakagami distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..aa934a5 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -2227,11 +2227,20 @@ class StudentTDistribution(SingleContinuousDistribution):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
 
+    def _cdf(self, x):
+        nu = self.nu
+        k = Dummy("k")
+        return Piecewise(
+            (S.Half + x*gamma(S(1)/2 + nu/2)*hgf_reg(S(1)/2, S(1)/2 + nu/2, S(3)/2, -x**2/nu)/(sqrt(nu*pi)*gamma(nu/2)), x < oo),
+            (S.One, True)
+        )
 
 def StudentT(name, nu):
     r"""
     Create a continuous random variable with a student's t distribution.
 
+    Create a continuous random variable with a student's t distribution.
+
     The density of the student's t distribution is given by
 
     .. math::

diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index e880705..13fe217 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -2554,12 +2554,20 @@ class UniformSumDistribution(SingleContinuousDistribution):
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
 
-
+    def _cdf(self, x):
+        n = self.n
+        k = Dummy("k")
+        return Piecewise(
+            (Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))/factorial(n), x <= n),
+            (S.One, True)
+        )
 
 def UniformSum(name, n):
     r"""
     Create a continuous random variable with an Irwin-Hall distribution.
 
+    Create a continuous random variable with an Irwin-Hall distribution.
+
     The probability distribution function depends on a single parameter
     `n` which is an integer.
 

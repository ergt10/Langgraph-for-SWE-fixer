
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 1bd5697..2f4eb2d 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -576,11 +576,11 @@ class StratifiedKFold(_BaseKFold):
             ``n_splits`` default value will change from 3 to 5 in v0.22.
 
     shuffle : boolean, optional
-        Whether to shuffle each stratification of the data before splitting
-        into batches.
+        Whether to shuffle the order of the batches before returning them.
 
     random_state : int, RandomState instance or None, optional, default=None
         If int, random_state is the seed used by the random number generator;
+
         If RandomState instance, random_state is the random number generator;
         If None, the random number generator is the RandomState instance used
         by `np.random`. Used when ``shuffle`` == True.

diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 1bd5697..7a82d57 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -621,9 +621,10 @@ class StratifiedKFold(_BaseKFold):
 
     def _make_test_folds(self, X, y=None):
         rng = self.random_state
-        y = np.asarray(y)
+        y = check_array(y, ensure_2d=False, dtype=None)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
+
         if type_of_target_y not in allowed_target_types:
             raise ValueError(
                 'Supported target types are: {}. Got {!r} instead.'.format(

diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 1bd5697..c900f19 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -669,9 +669,13 @@ class StratifiedKFold(_BaseKFold):
                 cls_test_folds[test_split] = test_fold_indices
                 test_folds[y == cls] = cls_test_folds
 
+        if self.shuffle:
+            rng.shuffle(test_folds)
+
         return test_folds
 
     def _iter_test_masks(self, X, y=None, groups=None):
+
         test_folds = self._make_test_folds(X, y)
         for i in range(self.n_splits):
             yield test_folds == i

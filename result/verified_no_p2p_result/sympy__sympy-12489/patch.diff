
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..b65a5fc 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -857,12 +857,13 @@ class Permutation(Basic):
         #g) (Permutation) = adjust size or return copy
         ok = True
         if not args:  # a
-            return _af_new(list(range(size or 0)))
+            return cls._af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            return cls._af_new(Cycle(*args).list(size))
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
+
                 if size is None or size == a.size:
                     return a
                 return Perm(a.array_form, size=size)

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..cb42431 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -869,10 +869,11 @@ class Permutation(Basic):
             if isinstance(a, Cycle):  # f
                 return _af_new(a.list(size))
             if not is_sequence(a):  # b
-                return _af_new(list(range(a + 1)))
+                return cls._af_new(list(range(a + 1)))
             if has_variety(is_sequence(ai) for ai in a):
                 ok = False
         else:
+
             ok = False
         if not ok:
             raise ValueError("Permutation argument must be a list of ints, "

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..baf6f76 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -919,16 +919,14 @@ class Permutation(Basic):
             # but do allow the permutation size to be increased
             aform.extend(list(range(len(aform), size)))
         size = len(aform)
-        obj = Basic.__new__(cls, aform)
-        obj._array_form = aform
-        obj._size = size
-        return obj
+        return cls._af_new(aform)
 
-    @staticmethod
-    def _af_new(perm):
+    @classmethod
+    def _af_new(cls, perm):
         """A method to produce a Permutation object from a list;
         the list is bound to the _array_form attribute, so it must
         not be modified; this method is meant for internal use only;
+
         the list ``a`` is supposed to be generated as a temporary value
         in a method, so p = Perm._af_new(a) is the only object
         to hold a reference to ``a``::

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..5fa6733 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -944,13 +944,11 @@ class Permutation(Basic):
         Permutation([2, 1, 3, 0])
 
         """
-        p = Basic.__new__(Perm, perm)
-        p._array_form = perm
-        p._size = len(perm)
-        return p
+        return cls.__new__(cls, perm)
 
     def _hashable_content(self):
         # the array_form (a list) is the Permutation arg, so we need to
+
         # return a tuple, instead
         return tuple(self.array_form)
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..d212dde 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1226,10 +1226,11 @@ class Permutation(Basic):
         which have _array_form
         """
         a = [x._array_form for x in args]
-        rv = _af_new(_af_rmuln(*a))
+        rv = cls._af_new(_af_rmuln(*a))
         return rv
 
     def mul_inv(self, other):
+
         """
         other*~self, self and other have _array_form
         """

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..5f26395 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1235,10 +1235,11 @@ class Permutation(Basic):
         """
         a = _af_invert(self._array_form)
         b = other._array_form
-        return _af_new(_af_rmul(a, b))
+        return cls._af_new(_af_rmul(a, b))
 
     def __rmul__(self, other):
         """This is needed to coerse other to Permutation in rmul."""
+
         return Perm(other)*self
 
     def __mul__(self, other):

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..405444a 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1300,10 +1300,11 @@ class Permutation(Basic):
         else:
             b.extend(list(range(len(b), len(a))))
             perm = [b[i] for i in a] + b[len(a):]
-        return _af_new(perm)
+        return cls._af_new(perm)
 
     def commutes_with(self, other):
         """
+
         Checks if the elements are commuting.
 
         Examples

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..35144e6 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1341,11 +1341,12 @@ class Permutation(Basic):
             raise NotImplementedError(
                 'p**p is not defined; do you mean p^p (conjugate)?')
         n = int(n)
-        return _af_new(_af_pow(self.array_form, n))
+        return cls._af_new(_af_pow(self.array_form, n))
 
     def __rxor__(self, i):
         """Return self(i) when ``i`` is an int.
 
+
         Examples
         ========
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..4024ae4 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1436,10 +1436,11 @@ class Permutation(Basic):
         p = self._array_form
         for i in range(self.size):
             a[h[i]] = h[p[i]]
-        return _af_new(a)
+        return cls._af_new(a)
 
     def transpositions(self):
         """
+
         Return the permutation decomposed into a list of transpositions.
 
         It is always possible to express a permutation as the product of

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..c4c8a47 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1629,10 +1629,11 @@ class Permutation(Basic):
                 perm[j], perm[i] = perm[i], perm[j]
                 i += 1
                 j -= 1
-        return _af_new(perm)
+        return cls._af_new(perm)
 
     @classmethod
     def unrank_nonlex(self, n, r):
+
         """
         This is a linear time unranking algorithm that does not
         respect lexicographic order [3].

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..36929af 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1661,10 +1661,11 @@ class Permutation(Basic):
         n = int(n)
         r = r % ifac(n)
         _unrank1(n, r, id_perm)
-        return _af_new(id_perm)
+        return cls._af_new(id_perm)
 
     def rank_nonlex(self, inv_perm=None):
         """
+
         This is a linear time ranking algorithm that does not
         enforce lexicographic order [3].
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..a62c769 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -1724,10 +1724,11 @@ class Permutation(Basic):
         r = self.rank_nonlex()
         if r == ifac(self.size) - 1:
             return None
-        return Perm.unrank_nonlex(self.size, r + 1)
+        return cls.unrank_nonlex(self.size, r + 1)
 
     def rank(self):
         """
+
         Returns the lexicographic rank of the permutation.
 
         Examples

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..f64c161 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -2423,10 +2423,11 @@ class Permutation(Basic):
                     perm[i] = perm[i - 1]
                 perm[k] = j - 1
             r2 = r1
-        return _af_new(perm)
+        return cls._af_new(perm)
 
     def next_trotterjohnson(self):
         """
+
         Returns the next permutation in Trotter-Johnson order.
         If self is the last permutation it returns None.
         See [4] section 2.4. If it is desired to generate all such

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..08e44ee 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -2477,10 +2477,11 @@ class Permutation(Basic):
                     done = True
         if m == 0:
             return None
-        return _af_new(pi)
+        return cls._af_new(pi)
 
     def get_precedence_matrix(self):
         """
+
         Gets the precedence matrix. This is used for computing the
         distance between two permutations.
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..c3eeaed 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -2734,10 +2734,11 @@ class Permutation(Basic):
         except IndexError:
             raise ValueError("The inversion vector is not valid.")
         perm.extend(N)
-        return _af_new(perm)
+        return cls._af_new(perm)
 
     @classmethod
     def random(self, n):
+
         """
         Generates a random permutation of length ``n``.
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..657abee 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -2753,10 +2753,11 @@ class Permutation(Basic):
         """
         perm_array = list(range(n))
         random.shuffle(perm_array)
-        return _af_new(perm_array)
+        return cls._af_new(perm_array)
 
     @classmethod
     def unrank_lex(self, size, rank):
+
         """
         Lexicographic permutation unranking.
 

diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 007fa70..c252f73 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -2787,10 +2787,11 @@ class Permutation(Basic):
                 if perm_array[j] > d - 1:
                     perm_array[j] += 1
             psize = new_psize
-        return _af_new(perm_array)
+        return cls._af_new(perm_array)
 
     # global flag to control how permutations are printed
     # when True, Permutation([0, 2, 1, 3]) -> Cycle(1, 2)
+
     # when False, Permutation([0, 2, 1, 3]) -> Permutation([0, 2, 1])
     print_cyclic = True
 
